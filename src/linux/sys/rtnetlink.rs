/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub unsafe fn as_ptr(&self) -> *const T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut_ptr(&mut self) -> *mut T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
impl<T> ::std::clone::Clone for __IncompleteArrayField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
pub const __llvm__: u32 = 1;
pub const __clang__: u32 = 1;
pub const __clang_major__: u32 = 8;
pub const __clang_minor__: u32 = 0;
pub const __clang_patchlevel__: u32 = 0;
pub const __clang_version__: &'static [u8; 28usize] = b"8.0.0 (Fedora 8.0.0-3.fc30)\0";
pub const __GNUC_MINOR__: u32 = 2;
pub const __GNUC_PATCHLEVEL__: u32 = 1;
pub const __GNUC__: u32 = 4;
pub const __GXX_ABI_VERSION: u32 = 1002;
pub const __ATOMIC_RELAXED: u32 = 0;
pub const __ATOMIC_CONSUME: u32 = 1;
pub const __ATOMIC_ACQUIRE: u32 = 2;
pub const __ATOMIC_RELEASE: u32 = 3;
pub const __ATOMIC_ACQ_REL: u32 = 4;
pub const __ATOMIC_SEQ_CST: u32 = 5;
pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM: u32 = 0;
pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP: u32 = 1;
pub const __OPENCL_MEMORY_SCOPE_DEVICE: u32 = 2;
pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES: u32 = 3;
pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP: u32 = 4;
pub const __PRAGMA_REDEFINE_EXTNAME: u32 = 1;
pub const __VERSION__: &'static [u8; 51usize] =
    b"4.2.1 Compatible Clang 8.0.0 (Fedora 8.0.0-3.fc30)\0";
pub const __OBJC_BOOL_IS_BOOL: u32 = 0;
pub const __CONSTANT_CFSTRINGS__: u32 = 1;
pub const __ORDER_LITTLE_ENDIAN__: u32 = 1234;
pub const __ORDER_BIG_ENDIAN__: u32 = 4321;
pub const __ORDER_PDP_ENDIAN__: u32 = 3412;
pub const __BYTE_ORDER__: u32 = 1234;
pub const __LITTLE_ENDIAN__: u32 = 1;
pub const _LP64: u32 = 1;
pub const __LP64__: u32 = 1;
pub const __CHAR_BIT__: u32 = 8;
pub const __SCHAR_MAX__: u32 = 127;
pub const __SHRT_MAX__: u32 = 32767;
pub const __INT_MAX__: u32 = 2147483647;
pub const __LONG_MAX__: u64 = 9223372036854775807;
pub const __LONG_LONG_MAX__: u64 = 9223372036854775807;
pub const __WCHAR_MAX__: u32 = 2147483647;
pub const __WINT_MAX__: u32 = 4294967295;
pub const __INTMAX_MAX__: u64 = 9223372036854775807;
pub const __SIZE_MAX__: i32 = -1;
pub const __UINTMAX_MAX__: i32 = -1;
pub const __PTRDIFF_MAX__: u64 = 9223372036854775807;
pub const __INTPTR_MAX__: u64 = 9223372036854775807;
pub const __UINTPTR_MAX__: i32 = -1;
pub const __SIZEOF_DOUBLE__: u32 = 8;
pub const __SIZEOF_FLOAT__: u32 = 4;
pub const __SIZEOF_INT__: u32 = 4;
pub const __SIZEOF_LONG__: u32 = 8;
pub const __SIZEOF_LONG_DOUBLE__: u32 = 16;
pub const __SIZEOF_LONG_LONG__: u32 = 8;
pub const __SIZEOF_POINTER__: u32 = 8;
pub const __SIZEOF_SHORT__: u32 = 2;
pub const __SIZEOF_PTRDIFF_T__: u32 = 8;
pub const __SIZEOF_SIZE_T__: u32 = 8;
pub const __SIZEOF_WCHAR_T__: u32 = 4;
pub const __SIZEOF_WINT_T__: u32 = 4;
pub const __SIZEOF_INT128__: u32 = 16;
pub const __INTMAX_FMTd__: &'static [u8; 3usize] = b"ld\0";
pub const __INTMAX_FMTi__: &'static [u8; 3usize] = b"li\0";
pub const __UINTMAX_FMTo__: &'static [u8; 3usize] = b"lo\0";
pub const __UINTMAX_FMTu__: &'static [u8; 3usize] = b"lu\0";
pub const __UINTMAX_FMTx__: &'static [u8; 3usize] = b"lx\0";
pub const __UINTMAX_FMTX__: &'static [u8; 3usize] = b"lX\0";
pub const __INTMAX_WIDTH__: u32 = 64;
pub const __PTRDIFF_FMTd__: &'static [u8; 3usize] = b"ld\0";
pub const __PTRDIFF_FMTi__: &'static [u8; 3usize] = b"li\0";
pub const __PTRDIFF_WIDTH__: u32 = 64;
pub const __INTPTR_FMTd__: &'static [u8; 3usize] = b"ld\0";
pub const __INTPTR_FMTi__: &'static [u8; 3usize] = b"li\0";
pub const __INTPTR_WIDTH__: u32 = 64;
pub const __SIZE_FMTo__: &'static [u8; 3usize] = b"lo\0";
pub const __SIZE_FMTu__: &'static [u8; 3usize] = b"lu\0";
pub const __SIZE_FMTx__: &'static [u8; 3usize] = b"lx\0";
pub const __SIZE_FMTX__: &'static [u8; 3usize] = b"lX\0";
pub const __SIZE_WIDTH__: u32 = 64;
pub const __WCHAR_WIDTH__: u32 = 32;
pub const __WINT_WIDTH__: u32 = 32;
pub const __SIG_ATOMIC_WIDTH__: u32 = 32;
pub const __SIG_ATOMIC_MAX__: u32 = 2147483647;
pub const __UINTMAX_WIDTH__: u32 = 64;
pub const __UINTPTR_FMTo__: &'static [u8; 3usize] = b"lo\0";
pub const __UINTPTR_FMTu__: &'static [u8; 3usize] = b"lu\0";
pub const __UINTPTR_FMTx__: &'static [u8; 3usize] = b"lx\0";
pub const __UINTPTR_FMTX__: &'static [u8; 3usize] = b"lX\0";
pub const __UINTPTR_WIDTH__: u32 = 64;
pub const __FLT16_HAS_DENORM__: u32 = 1;
pub const __FLT16_DIG__: u32 = 3;
pub const __FLT16_DECIMAL_DIG__: u32 = 5;
pub const __FLT16_HAS_INFINITY__: u32 = 1;
pub const __FLT16_HAS_QUIET_NAN__: u32 = 1;
pub const __FLT16_MANT_DIG__: u32 = 11;
pub const __FLT16_MAX_10_EXP__: u32 = 4;
pub const __FLT16_MAX_EXP__: u32 = 15;
pub const __FLT16_MIN_10_EXP__: i32 = -13;
pub const __FLT16_MIN_EXP__: i32 = -14;
pub const __FLT_HAS_DENORM__: u32 = 1;
pub const __FLT_DIG__: u32 = 6;
pub const __FLT_DECIMAL_DIG__: u32 = 9;
pub const __FLT_HAS_INFINITY__: u32 = 1;
pub const __FLT_HAS_QUIET_NAN__: u32 = 1;
pub const __FLT_MANT_DIG__: u32 = 24;
pub const __FLT_MAX_10_EXP__: u32 = 38;
pub const __FLT_MAX_EXP__: u32 = 128;
pub const __FLT_MIN_10_EXP__: i32 = -37;
pub const __FLT_MIN_EXP__: i32 = -125;
pub const __DBL_HAS_DENORM__: u32 = 1;
pub const __DBL_DIG__: u32 = 15;
pub const __DBL_DECIMAL_DIG__: u32 = 17;
pub const __DBL_HAS_INFINITY__: u32 = 1;
pub const __DBL_HAS_QUIET_NAN__: u32 = 1;
pub const __DBL_MANT_DIG__: u32 = 53;
pub const __DBL_MAX_10_EXP__: u32 = 308;
pub const __DBL_MAX_EXP__: u32 = 1024;
pub const __DBL_MIN_10_EXP__: i32 = -307;
pub const __DBL_MIN_EXP__: i32 = -1021;
pub const __LDBL_HAS_DENORM__: u32 = 1;
pub const __LDBL_DIG__: u32 = 18;
pub const __LDBL_DECIMAL_DIG__: u32 = 21;
pub const __LDBL_HAS_INFINITY__: u32 = 1;
pub const __LDBL_HAS_QUIET_NAN__: u32 = 1;
pub const __LDBL_MANT_DIG__: u32 = 64;
pub const __LDBL_MAX_10_EXP__: u32 = 4932;
pub const __LDBL_MAX_EXP__: u32 = 16384;
pub const __LDBL_MIN_10_EXP__: i32 = -4931;
pub const __LDBL_MIN_EXP__: i32 = -16381;
pub const __POINTER_WIDTH__: u32 = 64;
pub const __BIGGEST_ALIGNMENT__: u32 = 16;
pub const __WINT_UNSIGNED__: u32 = 1;
pub const __INT8_FMTd__: &'static [u8; 4usize] = b"hhd\0";
pub const __INT8_FMTi__: &'static [u8; 4usize] = b"hhi\0";
pub const __INT16_FMTd__: &'static [u8; 3usize] = b"hd\0";
pub const __INT16_FMTi__: &'static [u8; 3usize] = b"hi\0";
pub const __INT32_FMTd__: &'static [u8; 2usize] = b"d\0";
pub const __INT32_FMTi__: &'static [u8; 2usize] = b"i\0";
pub const __INT64_FMTd__: &'static [u8; 3usize] = b"ld\0";
pub const __INT64_FMTi__: &'static [u8; 3usize] = b"li\0";
pub const __UINT8_FMTo__: &'static [u8; 4usize] = b"hho\0";
pub const __UINT8_FMTu__: &'static [u8; 4usize] = b"hhu\0";
pub const __UINT8_FMTx__: &'static [u8; 4usize] = b"hhx\0";
pub const __UINT8_FMTX__: &'static [u8; 4usize] = b"hhX\0";
pub const __UINT8_MAX__: u32 = 255;
pub const __INT8_MAX__: u32 = 127;
pub const __UINT16_FMTo__: &'static [u8; 3usize] = b"ho\0";
pub const __UINT16_FMTu__: &'static [u8; 3usize] = b"hu\0";
pub const __UINT16_FMTx__: &'static [u8; 3usize] = b"hx\0";
pub const __UINT16_FMTX__: &'static [u8; 3usize] = b"hX\0";
pub const __UINT16_MAX__: u32 = 65535;
pub const __INT16_MAX__: u32 = 32767;
pub const __UINT32_FMTo__: &'static [u8; 2usize] = b"o\0";
pub const __UINT32_FMTu__: &'static [u8; 2usize] = b"u\0";
pub const __UINT32_FMTx__: &'static [u8; 2usize] = b"x\0";
pub const __UINT32_FMTX__: &'static [u8; 2usize] = b"X\0";
pub const __UINT32_MAX__: u32 = 4294967295;
pub const __INT32_MAX__: u32 = 2147483647;
pub const __UINT64_FMTo__: &'static [u8; 3usize] = b"lo\0";
pub const __UINT64_FMTu__: &'static [u8; 3usize] = b"lu\0";
pub const __UINT64_FMTx__: &'static [u8; 3usize] = b"lx\0";
pub const __UINT64_FMTX__: &'static [u8; 3usize] = b"lX\0";
pub const __UINT64_MAX__: i32 = -1;
pub const __INT64_MAX__: u64 = 9223372036854775807;
pub const __INT_LEAST8_MAX__: u32 = 127;
pub const __INT_LEAST8_FMTd__: &'static [u8; 4usize] = b"hhd\0";
pub const __INT_LEAST8_FMTi__: &'static [u8; 4usize] = b"hhi\0";
pub const __UINT_LEAST8_MAX__: u32 = 255;
pub const __UINT_LEAST8_FMTo__: &'static [u8; 4usize] = b"hho\0";
pub const __UINT_LEAST8_FMTu__: &'static [u8; 4usize] = b"hhu\0";
pub const __UINT_LEAST8_FMTx__: &'static [u8; 4usize] = b"hhx\0";
pub const __UINT_LEAST8_FMTX__: &'static [u8; 4usize] = b"hhX\0";
pub const __INT_LEAST16_MAX__: u32 = 32767;
pub const __INT_LEAST16_FMTd__: &'static [u8; 3usize] = b"hd\0";
pub const __INT_LEAST16_FMTi__: &'static [u8; 3usize] = b"hi\0";
pub const __UINT_LEAST16_MAX__: u32 = 65535;
pub const __UINT_LEAST16_FMTo__: &'static [u8; 3usize] = b"ho\0";
pub const __UINT_LEAST16_FMTu__: &'static [u8; 3usize] = b"hu\0";
pub const __UINT_LEAST16_FMTx__: &'static [u8; 3usize] = b"hx\0";
pub const __UINT_LEAST16_FMTX__: &'static [u8; 3usize] = b"hX\0";
pub const __INT_LEAST32_MAX__: u32 = 2147483647;
pub const __INT_LEAST32_FMTd__: &'static [u8; 2usize] = b"d\0";
pub const __INT_LEAST32_FMTi__: &'static [u8; 2usize] = b"i\0";
pub const __UINT_LEAST32_MAX__: u32 = 4294967295;
pub const __UINT_LEAST32_FMTo__: &'static [u8; 2usize] = b"o\0";
pub const __UINT_LEAST32_FMTu__: &'static [u8; 2usize] = b"u\0";
pub const __UINT_LEAST32_FMTx__: &'static [u8; 2usize] = b"x\0";
pub const __UINT_LEAST32_FMTX__: &'static [u8; 2usize] = b"X\0";
pub const __INT_LEAST64_MAX__: u64 = 9223372036854775807;
pub const __INT_LEAST64_FMTd__: &'static [u8; 3usize] = b"ld\0";
pub const __INT_LEAST64_FMTi__: &'static [u8; 3usize] = b"li\0";
pub const __UINT_LEAST64_MAX__: i32 = -1;
pub const __UINT_LEAST64_FMTo__: &'static [u8; 3usize] = b"lo\0";
pub const __UINT_LEAST64_FMTu__: &'static [u8; 3usize] = b"lu\0";
pub const __UINT_LEAST64_FMTx__: &'static [u8; 3usize] = b"lx\0";
pub const __UINT_LEAST64_FMTX__: &'static [u8; 3usize] = b"lX\0";
pub const __INT_FAST8_MAX__: u32 = 127;
pub const __INT_FAST8_FMTd__: &'static [u8; 4usize] = b"hhd\0";
pub const __INT_FAST8_FMTi__: &'static [u8; 4usize] = b"hhi\0";
pub const __UINT_FAST8_MAX__: u32 = 255;
pub const __UINT_FAST8_FMTo__: &'static [u8; 4usize] = b"hho\0";
pub const __UINT_FAST8_FMTu__: &'static [u8; 4usize] = b"hhu\0";
pub const __UINT_FAST8_FMTx__: &'static [u8; 4usize] = b"hhx\0";
pub const __UINT_FAST8_FMTX__: &'static [u8; 4usize] = b"hhX\0";
pub const __INT_FAST16_MAX__: u32 = 32767;
pub const __INT_FAST16_FMTd__: &'static [u8; 3usize] = b"hd\0";
pub const __INT_FAST16_FMTi__: &'static [u8; 3usize] = b"hi\0";
pub const __UINT_FAST16_MAX__: u32 = 65535;
pub const __UINT_FAST16_FMTo__: &'static [u8; 3usize] = b"ho\0";
pub const __UINT_FAST16_FMTu__: &'static [u8; 3usize] = b"hu\0";
pub const __UINT_FAST16_FMTx__: &'static [u8; 3usize] = b"hx\0";
pub const __UINT_FAST16_FMTX__: &'static [u8; 3usize] = b"hX\0";
pub const __INT_FAST32_MAX__: u32 = 2147483647;
pub const __INT_FAST32_FMTd__: &'static [u8; 2usize] = b"d\0";
pub const __INT_FAST32_FMTi__: &'static [u8; 2usize] = b"i\0";
pub const __UINT_FAST32_MAX__: u32 = 4294967295;
pub const __UINT_FAST32_FMTo__: &'static [u8; 2usize] = b"o\0";
pub const __UINT_FAST32_FMTu__: &'static [u8; 2usize] = b"u\0";
pub const __UINT_FAST32_FMTx__: &'static [u8; 2usize] = b"x\0";
pub const __UINT_FAST32_FMTX__: &'static [u8; 2usize] = b"X\0";
pub const __INT_FAST64_MAX__: u64 = 9223372036854775807;
pub const __INT_FAST64_FMTd__: &'static [u8; 3usize] = b"ld\0";
pub const __INT_FAST64_FMTi__: &'static [u8; 3usize] = b"li\0";
pub const __UINT_FAST64_MAX__: i32 = -1;
pub const __UINT_FAST64_FMTo__: &'static [u8; 3usize] = b"lo\0";
pub const __UINT_FAST64_FMTu__: &'static [u8; 3usize] = b"lu\0";
pub const __UINT_FAST64_FMTx__: &'static [u8; 3usize] = b"lx\0";
pub const __UINT_FAST64_FMTX__: &'static [u8; 3usize] = b"lX\0";
pub const __FINITE_MATH_ONLY__: u32 = 0;
pub const __GNUC_STDC_INLINE__: u32 = 1;
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL: u32 = 1;
pub const __CLANG_ATOMIC_BOOL_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_CHAR_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_SHORT_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_INT_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_LONG_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_LLONG_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_POINTER_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_BOOL_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_CHAR_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_SHORT_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_INT_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_LONG_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_LLONG_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_POINTER_LOCK_FREE: u32 = 2;
pub const __NO_INLINE__: u32 = 1;
pub const __FLT_EVAL_METHOD__: u32 = 0;
pub const __FLT_RADIX__: u32 = 2;
pub const __DECIMAL_DIG__: u32 = 21;
pub const __code_model_small_: u32 = 1;
pub const __amd64__: u32 = 1;
pub const __amd64: u32 = 1;
pub const __x86_64: u32 = 1;
pub const __x86_64__: u32 = 1;
pub const __k8: u32 = 1;
pub const __k8__: u32 = 1;
pub const __tune_k8__: u32 = 1;
pub const __NO_MATH_INLINES: u32 = 1;
pub const __FXSR__: u32 = 1;
pub const __SSE2__: u32 = 1;
pub const __SSE2_MATH__: u32 = 1;
pub const __SSE__: u32 = 1;
pub const __SSE_MATH__: u32 = 1;
pub const __MMX__: u32 = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1: u32 = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2: u32 = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4: u32 = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8: u32 = 1;
pub const __SIZEOF_FLOAT128__: u32 = 16;
pub const unix: u32 = 1;
pub const __unix: u32 = 1;
pub const __unix__: u32 = 1;
pub const linux: u32 = 1;
pub const __linux: u32 = 1;
pub const __linux__: u32 = 1;
pub const __ELF__: u32 = 1;
pub const __gnu_linux__: u32 = 1;
pub const __FLOAT128__: u32 = 1;
pub const __STDC__: u32 = 1;
pub const __STDC_HOSTED__: u32 = 1;
pub const __STDC_VERSION__: u32 = 201112;
pub const __STDC_UTF_16__: u32 = 1;
pub const __STDC_UTF_32__: u32 = 1;
pub const _FORTIFY_SOURCE: u32 = 2;
pub const _GNU_SOURCE: u32 = 1;
pub const __BITS_PER_LONG: u32 = 64;
pub const __FD_SETSIZE: u32 = 1024;
pub const SI_LOAD_SHIFT: u32 = 16;
pub const _K_SS_MAXSIZE: u32 = 128;
pub const NETLINK_ROUTE: u32 = 0;
pub const NETLINK_UNUSED: u32 = 1;
pub const NETLINK_USERSOCK: u32 = 2;
pub const NETLINK_FIREWALL: u32 = 3;
pub const NETLINK_SOCK_DIAG: u32 = 4;
pub const NETLINK_NFLOG: u32 = 5;
pub const NETLINK_XFRM: u32 = 6;
pub const NETLINK_SELINUX: u32 = 7;
pub const NETLINK_ISCSI: u32 = 8;
pub const NETLINK_AUDIT: u32 = 9;
pub const NETLINK_FIB_LOOKUP: u32 = 10;
pub const NETLINK_CONNECTOR: u32 = 11;
pub const NETLINK_NETFILTER: u32 = 12;
pub const NETLINK_IP6_FW: u32 = 13;
pub const NETLINK_DNRTMSG: u32 = 14;
pub const NETLINK_KOBJECT_UEVENT: u32 = 15;
pub const NETLINK_GENERIC: u32 = 16;
pub const NETLINK_SCSITRANSPORT: u32 = 18;
pub const NETLINK_ECRYPTFS: u32 = 19;
pub const NETLINK_RDMA: u32 = 20;
pub const NETLINK_CRYPTO: u32 = 21;
pub const NETLINK_SMC: u32 = 22;
pub const NETLINK_INET_DIAG: u32 = 4;
pub const MAX_LINKS: u32 = 32;
pub const NLM_F_REQUEST: u32 = 1;
pub const NLM_F_MULTI: u32 = 2;
pub const NLM_F_ACK: u32 = 4;
pub const NLM_F_ECHO: u32 = 8;
pub const NLM_F_DUMP_INTR: u32 = 16;
pub const NLM_F_DUMP_FILTERED: u32 = 32;
pub const NLM_F_ROOT: u32 = 256;
pub const NLM_F_MATCH: u32 = 512;
pub const NLM_F_ATOMIC: u32 = 1024;
pub const NLM_F_DUMP: u32 = 768;
pub const NLM_F_REPLACE: u32 = 256;
pub const NLM_F_EXCL: u32 = 512;
pub const NLM_F_CREATE: u32 = 1024;
pub const NLM_F_APPEND: u32 = 2048;
pub const NLM_F_NONREC: u32 = 256;
pub const NLM_F_CAPPED: u32 = 256;
pub const NLM_F_ACK_TLVS: u32 = 512;
pub const NLMSG_ALIGNTO: u32 = 4;
pub const NLMSG_NOOP: u32 = 1;
pub const NLMSG_ERROR: u32 = 2;
pub const NLMSG_DONE: u32 = 3;
pub const NLMSG_OVERRUN: u32 = 4;
pub const NLMSG_MIN_TYPE: u32 = 16;
pub const NETLINK_ADD_MEMBERSHIP: u32 = 1;
pub const NETLINK_DROP_MEMBERSHIP: u32 = 2;
pub const NETLINK_PKTINFO: u32 = 3;
pub const NETLINK_BROADCAST_ERROR: u32 = 4;
pub const NETLINK_NO_ENOBUFS: u32 = 5;
pub const NETLINK_RX_RING: u32 = 6;
pub const NETLINK_TX_RING: u32 = 7;
pub const NETLINK_LISTEN_ALL_NSID: u32 = 8;
pub const NETLINK_LIST_MEMBERSHIPS: u32 = 9;
pub const NETLINK_CAP_ACK: u32 = 10;
pub const NETLINK_EXT_ACK: u32 = 11;
pub const NETLINK_GET_STRICT_CHK: u32 = 12;
pub const NL_MMAP_MSG_ALIGNMENT: u32 = 4;
pub const NET_MAJOR: u32 = 36;
pub const NLA_F_NESTED: u32 = 32768;
pub const NLA_F_NET_BYTEORDER: u32 = 16384;
pub const NLA_TYPE_MASK: i32 = -49153;
pub const NLA_ALIGNTO: u32 = 4;
pub const MACVLAN_FLAG_NOPROMISC: u32 = 1;
pub const IPVLAN_F_PRIVATE: u32 = 1;
pub const IPVLAN_F_VEPA: u32 = 2;
pub const MAX_VLAN_LIST_LEN: u32 = 1;
pub const PORT_PROFILE_MAX: u32 = 40;
pub const PORT_UUID_MAX: u32 = 16;
pub const PORT_SELF_VF: i32 = -1;
pub const XDP_FLAGS_UPDATE_IF_NOEXIST: u32 = 1;
pub const XDP_FLAGS_SKB_MODE: u32 = 2;
pub const XDP_FLAGS_DRV_MODE: u32 = 4;
pub const XDP_FLAGS_HW_MODE: u32 = 8;
pub const XDP_FLAGS_MODES: u32 = 14;
pub const XDP_FLAGS_MASK: u32 = 15;
pub const RMNET_FLAGS_INGRESS_DEAGGREGATION: u32 = 1;
pub const RMNET_FLAGS_INGRESS_MAP_COMMANDS: u32 = 2;
pub const RMNET_FLAGS_INGRESS_MAP_CKSUMV4: u32 = 4;
pub const RMNET_FLAGS_EGRESS_MAP_CKSUMV4: u32 = 8;
pub const IFA_F_SECONDARY: u32 = 1;
pub const IFA_F_TEMPORARY: u32 = 1;
pub const IFA_F_NODAD: u32 = 2;
pub const IFA_F_OPTIMISTIC: u32 = 4;
pub const IFA_F_DADFAILED: u32 = 8;
pub const IFA_F_HOMEADDRESS: u32 = 16;
pub const IFA_F_DEPRECATED: u32 = 32;
pub const IFA_F_TENTATIVE: u32 = 64;
pub const IFA_F_PERMANENT: u32 = 128;
pub const IFA_F_MANAGETEMPADDR: u32 = 256;
pub const IFA_F_NOPREFIXROUTE: u32 = 512;
pub const IFA_F_MCAUTOJOIN: u32 = 1024;
pub const IFA_F_STABLE_PRIVACY: u32 = 2048;
pub const NTF_USE: u32 = 1;
pub const NTF_SELF: u32 = 2;
pub const NTF_MASTER: u32 = 4;
pub const NTF_PROXY: u32 = 8;
pub const NTF_EXT_LEARNED: u32 = 16;
pub const NTF_OFFLOADED: u32 = 32;
pub const NTF_STICKY: u32 = 64;
pub const NTF_ROUTER: u32 = 128;
pub const NUD_INCOMPLETE: u32 = 1;
pub const NUD_REACHABLE: u32 = 2;
pub const NUD_STALE: u32 = 4;
pub const NUD_DELAY: u32 = 8;
pub const NUD_PROBE: u32 = 16;
pub const NUD_FAILED: u32 = 32;
pub const NUD_NOARP: u32 = 64;
pub const NUD_PERMANENT: u32 = 128;
pub const NUD_NONE: u32 = 0;
pub const RTNL_FAMILY_IPMR: u32 = 128;
pub const RTNL_FAMILY_IP6MR: u32 = 129;
pub const RTNL_FAMILY_MAX: u32 = 129;
pub const RTA_ALIGNTO: u32 = 4;
pub const RTPROT_UNSPEC: u32 = 0;
pub const RTPROT_REDIRECT: u32 = 1;
pub const RTPROT_KERNEL: u32 = 2;
pub const RTPROT_BOOT: u32 = 3;
pub const RTPROT_STATIC: u32 = 4;
pub const RTPROT_GATED: u32 = 8;
pub const RTPROT_RA: u32 = 9;
pub const RTPROT_MRT: u32 = 10;
pub const RTPROT_ZEBRA: u32 = 11;
pub const RTPROT_BIRD: u32 = 12;
pub const RTPROT_DNROUTED: u32 = 13;
pub const RTPROT_XORP: u32 = 14;
pub const RTPROT_NTK: u32 = 15;
pub const RTPROT_DHCP: u32 = 16;
pub const RTPROT_MROUTED: u32 = 17;
pub const RTPROT_BABEL: u32 = 42;
pub const RTPROT_BGP: u32 = 186;
pub const RTPROT_ISIS: u32 = 187;
pub const RTPROT_OSPF: u32 = 188;
pub const RTPROT_RIP: u32 = 189;
pub const RTPROT_EIGRP: u32 = 192;
pub const RTM_F_NOTIFY: u32 = 256;
pub const RTM_F_CLONED: u32 = 512;
pub const RTM_F_EQUALIZE: u32 = 1024;
pub const RTM_F_PREFIX: u32 = 2048;
pub const RTM_F_LOOKUP_TABLE: u32 = 4096;
pub const RTM_F_FIB_MATCH: u32 = 8192;
pub const RTNH_F_DEAD: u32 = 1;
pub const RTNH_F_PERVASIVE: u32 = 2;
pub const RTNH_F_ONLINK: u32 = 4;
pub const RTNH_F_OFFLOAD: u32 = 8;
pub const RTNH_F_LINKDOWN: u32 = 16;
pub const RTNH_F_UNRESOLVED: u32 = 32;
pub const RTNH_COMPARE_MASK: u32 = 25;
pub const RTNH_ALIGNTO: u32 = 4;
pub const RTNETLINK_HAVE_PEERINFO: u32 = 1;
pub const RTAX_FEATURE_ECN: u32 = 1;
pub const RTAX_FEATURE_SACK: u32 = 2;
pub const RTAX_FEATURE_TIMESTAMP: u32 = 4;
pub const RTAX_FEATURE_ALLFRAG: u32 = 8;
pub const RTAX_FEATURE_MASK: u32 = 15;
pub const TCM_IFINDEX_MAGIC_BLOCK: u32 = 4294967295;
pub const RTMGRP_LINK: u32 = 1;
pub const RTMGRP_NOTIFY: u32 = 2;
pub const RTMGRP_NEIGH: u32 = 4;
pub const RTMGRP_TC: u32 = 8;
pub const RTMGRP_IPV4_IFADDR: u32 = 16;
pub const RTMGRP_IPV4_MROUTE: u32 = 32;
pub const RTMGRP_IPV4_ROUTE: u32 = 64;
pub const RTMGRP_IPV4_RULE: u32 = 128;
pub const RTMGRP_IPV6_IFADDR: u32 = 256;
pub const RTMGRP_IPV6_MROUTE: u32 = 512;
pub const RTMGRP_IPV6_ROUTE: u32 = 1024;
pub const RTMGRP_IPV6_IFINFO: u32 = 2048;
pub const RTMGRP_DECnet_IFADDR: u32 = 4096;
pub const RTMGRP_DECnet_ROUTE: u32 = 16384;
pub const RTMGRP_IPV6_PREFIX: u32 = 131072;
pub const TCA_FLAG_LARGE_DUMP_ON: u32 = 1;
pub const RTEXT_FILTER_VF: u32 = 1;
pub const RTEXT_FILTER_BRVLAN: u32 = 2;
pub const RTEXT_FILTER_BRVLAN_COMPRESSED: u32 = 4;
pub const RTEXT_FILTER_SKIP_STATS: u32 = 8;
pub type __s8 = ::std::os::raw::c_schar;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __s16 = ::std::os::raw::c_short;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __s32 = ::std::os::raw::c_int;
pub type __u32 = ::std::os::raw::c_uint;
pub type __s64 = ::std::os::raw::c_longlong;
pub type __u64 = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___kernel_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__kernel_fd_set>())).fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fd_set),
            "::",
            stringify!(fds_bits)
        )
    );
}
pub type __kernel_sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __kernel_old_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_dev_t = ::std::os::raw::c_ulong;
pub type __kernel_long_t = ::std::os::raw::c_long;
pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::std::os::raw::c_uint;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_int;
pub type __kernel_uid_t = ::std::os::raw::c_uint;
pub type __kernel_gid_t = ::std::os::raw::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct __kernel_fsid_t {
    pub val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___kernel_fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__kernel_fsid_t>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fsid_t),
            "::",
            stringify!(val)
        )
    );
}
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_time64_t = ::std::os::raw::c_longlong;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
pub type __sum16 = __u16;
pub type __wsum = __u32;
pub type __poll_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug)]
pub struct sysinfo {
    pub uptime: __kernel_long_t,
    pub loads: [__kernel_ulong_t; 3usize],
    pub totalram: __kernel_ulong_t,
    pub freeram: __kernel_ulong_t,
    pub sharedram: __kernel_ulong_t,
    pub bufferram: __kernel_ulong_t,
    pub totalswap: __kernel_ulong_t,
    pub freeswap: __kernel_ulong_t,
    pub procs: __u16,
    pub pad: __u16,
    pub totalhigh: __kernel_ulong_t,
    pub freehigh: __kernel_ulong_t,
    pub mem_unit: __u32,
    pub _f: __IncompleteArrayField<::std::os::raw::c_char>,
}
#[test]
fn bindgen_test_layout_sysinfo() {
    assert_eq!(
        ::std::mem::size_of::<sysinfo>(),
        112usize,
        concat!("Size of: ", stringify!(sysinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<sysinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(sysinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysinfo>())).uptime as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(uptime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysinfo>())).loads as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(loads)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysinfo>())).totalram as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(totalram)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysinfo>())).freeram as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(freeram)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysinfo>())).sharedram as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(sharedram)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysinfo>())).bufferram as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(bufferram)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysinfo>())).totalswap as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(totalswap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysinfo>())).freeswap as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(freeswap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysinfo>())).procs as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(procs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysinfo>())).pad as *const _ as usize },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysinfo>())).totalhigh as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(totalhigh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysinfo>())).freehigh as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(freehigh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysinfo>())).mem_unit as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(mem_unit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysinfo>()))._f as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(_f)
        )
    );
}
pub type __kernel_sa_family_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __kernel_sockaddr_storage {
    pub __bindgen_anon_1: __kernel_sockaddr_storage__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __kernel_sockaddr_storage__bindgen_ty_1 {
    pub __bindgen_anon_1: __kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1,
    pub __align: *mut ::std::os::raw::c_void,
    _bindgen_union_align: [u64; 16usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1 {
    pub ss_family: __kernel_sa_family_t,
    pub __data: [::std::os::raw::c_char; 126usize],
}
#[test]
fn bindgen_test_layout___kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1>(),
        128usize,
        concat!(
            "Size of: ",
            stringify!(__kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(__kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1>()))
                .ss_family as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(ss_family)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1>())).__data
                as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__data)
        )
    );
}
impl ::std::fmt::Debug for __kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! ( f , "__kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1 {{ ss_family: {:?}, __data: [{}] }}" , self . ss_family , self . __data . iter ( ) . enumerate ( ) . map ( | ( i , v ) | format ! ( "{}{:?}" , if i > 0 { ", " } else { "" } , v ) ) . collect :: < String > ( ) )
    }
}
#[test]
fn bindgen_test_layout___kernel_sockaddr_storage__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_sockaddr_storage__bindgen_ty_1>(),
        128usize,
        concat!(
            "Size of: ",
            stringify!(__kernel_sockaddr_storage__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_sockaddr_storage__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__kernel_sockaddr_storage__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__kernel_sockaddr_storage__bindgen_ty_1>())).__align as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_sockaddr_storage__bindgen_ty_1),
            "::",
            stringify!(__align)
        )
    );
}
impl ::std::fmt::Debug for __kernel_sockaddr_storage__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "__kernel_sockaddr_storage__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout___kernel_sockaddr_storage() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_sockaddr_storage>(),
        128usize,
        concat!("Size of: ", stringify!(__kernel_sockaddr_storage))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_sockaddr_storage>(),
        8usize,
        concat!("Alignment of ", stringify!(__kernel_sockaddr_storage))
    );
}
impl ::std::fmt::Debug for __kernel_sockaddr_storage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "__kernel_sockaddr_storage {{ __bindgen_anon_1: {:?} }}",
            self.__bindgen_anon_1
        )
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct sockaddr_nl {
    pub nl_family: __kernel_sa_family_t,
    pub nl_pad: ::std::os::raw::c_ushort,
    pub nl_pid: __u32,
    pub nl_groups: __u32,
}
#[test]
fn bindgen_test_layout_sockaddr_nl() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr_nl>(),
        12usize,
        concat!("Size of: ", stringify!(sockaddr_nl))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_nl>(),
        4usize,
        concat!("Alignment of ", stringify!(sockaddr_nl))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_nl>())).nl_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_nl),
            "::",
            stringify!(nl_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_nl>())).nl_pad as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_nl),
            "::",
            stringify!(nl_pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_nl>())).nl_pid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_nl),
            "::",
            stringify!(nl_pid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_nl>())).nl_groups as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_nl),
            "::",
            stringify!(nl_groups)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct nlmsghdr {
    pub nlmsg_len: __u32,
    pub nlmsg_type: __u16,
    pub nlmsg_flags: __u16,
    pub nlmsg_seq: __u32,
    pub nlmsg_pid: __u32,
}
#[test]
fn bindgen_test_layout_nlmsghdr() {
    assert_eq!(
        ::std::mem::size_of::<nlmsghdr>(),
        16usize,
        concat!("Size of: ", stringify!(nlmsghdr))
    );
    assert_eq!(
        ::std::mem::align_of::<nlmsghdr>(),
        4usize,
        concat!("Alignment of ", stringify!(nlmsghdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nlmsghdr>())).nlmsg_len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nlmsghdr),
            "::",
            stringify!(nlmsg_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nlmsghdr>())).nlmsg_type as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(nlmsghdr),
            "::",
            stringify!(nlmsg_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nlmsghdr>())).nlmsg_flags as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(nlmsghdr),
            "::",
            stringify!(nlmsg_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nlmsghdr>())).nlmsg_seq as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(nlmsghdr),
            "::",
            stringify!(nlmsg_seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nlmsghdr>())).nlmsg_pid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(nlmsghdr),
            "::",
            stringify!(nlmsg_pid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct nlmsgerr {
    pub error: ::std::os::raw::c_int,
    pub msg: nlmsghdr,
}
#[test]
fn bindgen_test_layout_nlmsgerr() {
    assert_eq!(
        ::std::mem::size_of::<nlmsgerr>(),
        20usize,
        concat!("Size of: ", stringify!(nlmsgerr))
    );
    assert_eq!(
        ::std::mem::align_of::<nlmsgerr>(),
        4usize,
        concat!("Alignment of ", stringify!(nlmsgerr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nlmsgerr>())).error as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nlmsgerr),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nlmsgerr>())).msg as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(nlmsgerr),
            "::",
            stringify!(msg)
        )
    );
}
pub const nlmsgerr_attrs_NLMSGERR_ATTR_UNUSED: nlmsgerr_attrs = 0;
pub const nlmsgerr_attrs_NLMSGERR_ATTR_MSG: nlmsgerr_attrs = 1;
pub const nlmsgerr_attrs_NLMSGERR_ATTR_OFFS: nlmsgerr_attrs = 2;
pub const nlmsgerr_attrs_NLMSGERR_ATTR_COOKIE: nlmsgerr_attrs = 3;
pub const nlmsgerr_attrs___NLMSGERR_ATTR_MAX: nlmsgerr_attrs = 4;
pub const nlmsgerr_attrs_NLMSGERR_ATTR_MAX: nlmsgerr_attrs = 3;
pub type nlmsgerr_attrs = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct nl_pktinfo {
    pub group: __u32,
}
#[test]
fn bindgen_test_layout_nl_pktinfo() {
    assert_eq!(
        ::std::mem::size_of::<nl_pktinfo>(),
        4usize,
        concat!("Size of: ", stringify!(nl_pktinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<nl_pktinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(nl_pktinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nl_pktinfo>())).group as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nl_pktinfo),
            "::",
            stringify!(group)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct nl_mmap_req {
    pub nm_block_size: ::std::os::raw::c_uint,
    pub nm_block_nr: ::std::os::raw::c_uint,
    pub nm_frame_size: ::std::os::raw::c_uint,
    pub nm_frame_nr: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_nl_mmap_req() {
    assert_eq!(
        ::std::mem::size_of::<nl_mmap_req>(),
        16usize,
        concat!("Size of: ", stringify!(nl_mmap_req))
    );
    assert_eq!(
        ::std::mem::align_of::<nl_mmap_req>(),
        4usize,
        concat!("Alignment of ", stringify!(nl_mmap_req))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nl_mmap_req>())).nm_block_size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nl_mmap_req),
            "::",
            stringify!(nm_block_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nl_mmap_req>())).nm_block_nr as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(nl_mmap_req),
            "::",
            stringify!(nm_block_nr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nl_mmap_req>())).nm_frame_size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(nl_mmap_req),
            "::",
            stringify!(nm_frame_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nl_mmap_req>())).nm_frame_nr as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(nl_mmap_req),
            "::",
            stringify!(nm_frame_nr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct nl_mmap_hdr {
    pub nm_status: ::std::os::raw::c_uint,
    pub nm_len: ::std::os::raw::c_uint,
    pub nm_group: __u32,
    pub nm_pid: __u32,
    pub nm_uid: __u32,
    pub nm_gid: __u32,
}
#[test]
fn bindgen_test_layout_nl_mmap_hdr() {
    assert_eq!(
        ::std::mem::size_of::<nl_mmap_hdr>(),
        24usize,
        concat!("Size of: ", stringify!(nl_mmap_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<nl_mmap_hdr>(),
        4usize,
        concat!("Alignment of ", stringify!(nl_mmap_hdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nl_mmap_hdr>())).nm_status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nl_mmap_hdr),
            "::",
            stringify!(nm_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nl_mmap_hdr>())).nm_len as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(nl_mmap_hdr),
            "::",
            stringify!(nm_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nl_mmap_hdr>())).nm_group as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(nl_mmap_hdr),
            "::",
            stringify!(nm_group)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nl_mmap_hdr>())).nm_pid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(nl_mmap_hdr),
            "::",
            stringify!(nm_pid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nl_mmap_hdr>())).nm_uid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(nl_mmap_hdr),
            "::",
            stringify!(nm_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nl_mmap_hdr>())).nm_gid as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(nl_mmap_hdr),
            "::",
            stringify!(nm_gid)
        )
    );
}
pub const nl_mmap_status_NL_MMAP_STATUS_UNUSED: nl_mmap_status = 0;
pub const nl_mmap_status_NL_MMAP_STATUS_RESERVED: nl_mmap_status = 1;
pub const nl_mmap_status_NL_MMAP_STATUS_VALID: nl_mmap_status = 2;
pub const nl_mmap_status_NL_MMAP_STATUS_COPY: nl_mmap_status = 3;
pub const nl_mmap_status_NL_MMAP_STATUS_SKIP: nl_mmap_status = 4;
pub type nl_mmap_status = u32;
pub const NETLINK_UNCONNECTED: _bindgen_ty_1 = 0;
pub const NETLINK_CONNECTED: _bindgen_ty_1 = 1;
pub type _bindgen_ty_1 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct nlattr {
    pub nla_len: __u16,
    pub nla_type: __u16,
}
#[test]
fn bindgen_test_layout_nlattr() {
    assert_eq!(
        ::std::mem::size_of::<nlattr>(),
        4usize,
        concat!("Size of: ", stringify!(nlattr))
    );
    assert_eq!(
        ::std::mem::align_of::<nlattr>(),
        2usize,
        concat!("Alignment of ", stringify!(nlattr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nlattr>())).nla_len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nlattr),
            "::",
            stringify!(nla_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nlattr>())).nla_type as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(nlattr),
            "::",
            stringify!(nla_type)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct nla_bitfield32 {
    pub value: __u32,
    pub selector: __u32,
}
#[test]
fn bindgen_test_layout_nla_bitfield32() {
    assert_eq!(
        ::std::mem::size_of::<nla_bitfield32>(),
        8usize,
        concat!("Size of: ", stringify!(nla_bitfield32))
    );
    assert_eq!(
        ::std::mem::align_of::<nla_bitfield32>(),
        4usize,
        concat!("Alignment of ", stringify!(nla_bitfield32))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nla_bitfield32>())).value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nla_bitfield32),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nla_bitfield32>())).selector as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(nla_bitfield32),
            "::",
            stringify!(selector)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct rtnl_link_stats {
    pub rx_packets: __u32,
    pub tx_packets: __u32,
    pub rx_bytes: __u32,
    pub tx_bytes: __u32,
    pub rx_errors: __u32,
    pub tx_errors: __u32,
    pub rx_dropped: __u32,
    pub tx_dropped: __u32,
    pub multicast: __u32,
    pub collisions: __u32,
    pub rx_length_errors: __u32,
    pub rx_over_errors: __u32,
    pub rx_crc_errors: __u32,
    pub rx_frame_errors: __u32,
    pub rx_fifo_errors: __u32,
    pub rx_missed_errors: __u32,
    pub tx_aborted_errors: __u32,
    pub tx_carrier_errors: __u32,
    pub tx_fifo_errors: __u32,
    pub tx_heartbeat_errors: __u32,
    pub tx_window_errors: __u32,
    pub rx_compressed: __u32,
    pub tx_compressed: __u32,
    pub rx_nohandler: __u32,
}
#[test]
fn bindgen_test_layout_rtnl_link_stats() {
    assert_eq!(
        ::std::mem::size_of::<rtnl_link_stats>(),
        96usize,
        concat!("Size of: ", stringify!(rtnl_link_stats))
    );
    assert_eq!(
        ::std::mem::align_of::<rtnl_link_stats>(),
        4usize,
        concat!("Alignment of ", stringify!(rtnl_link_stats))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats>())).rx_packets as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(rx_packets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats>())).tx_packets as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(tx_packets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats>())).rx_bytes as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(rx_bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats>())).tx_bytes as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(tx_bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats>())).rx_errors as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(rx_errors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats>())).tx_errors as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(tx_errors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats>())).rx_dropped as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(rx_dropped)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats>())).tx_dropped as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(tx_dropped)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats>())).multicast as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(multicast)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats>())).collisions as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(collisions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rtnl_link_stats>())).rx_length_errors as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(rx_length_errors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats>())).rx_over_errors as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(rx_over_errors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats>())).rx_crc_errors as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(rx_crc_errors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats>())).rx_frame_errors as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(rx_frame_errors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats>())).rx_fifo_errors as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(rx_fifo_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rtnl_link_stats>())).rx_missed_errors as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(rx_missed_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rtnl_link_stats>())).tx_aborted_errors as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(tx_aborted_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rtnl_link_stats>())).tx_carrier_errors as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(tx_carrier_errors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats>())).tx_fifo_errors as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(tx_fifo_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rtnl_link_stats>())).tx_heartbeat_errors as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(tx_heartbeat_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rtnl_link_stats>())).tx_window_errors as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(tx_window_errors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats>())).rx_compressed as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(rx_compressed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats>())).tx_compressed as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(tx_compressed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats>())).rx_nohandler as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(rx_nohandler)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct rtnl_link_stats64 {
    pub rx_packets: __u64,
    pub tx_packets: __u64,
    pub rx_bytes: __u64,
    pub tx_bytes: __u64,
    pub rx_errors: __u64,
    pub tx_errors: __u64,
    pub rx_dropped: __u64,
    pub tx_dropped: __u64,
    pub multicast: __u64,
    pub collisions: __u64,
    pub rx_length_errors: __u64,
    pub rx_over_errors: __u64,
    pub rx_crc_errors: __u64,
    pub rx_frame_errors: __u64,
    pub rx_fifo_errors: __u64,
    pub rx_missed_errors: __u64,
    pub tx_aborted_errors: __u64,
    pub tx_carrier_errors: __u64,
    pub tx_fifo_errors: __u64,
    pub tx_heartbeat_errors: __u64,
    pub tx_window_errors: __u64,
    pub rx_compressed: __u64,
    pub tx_compressed: __u64,
    pub rx_nohandler: __u64,
}
#[test]
fn bindgen_test_layout_rtnl_link_stats64() {
    assert_eq!(
        ::std::mem::size_of::<rtnl_link_stats64>(),
        192usize,
        concat!("Size of: ", stringify!(rtnl_link_stats64))
    );
    assert_eq!(
        ::std::mem::align_of::<rtnl_link_stats64>(),
        8usize,
        concat!("Alignment of ", stringify!(rtnl_link_stats64))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats64>())).rx_packets as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(rx_packets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats64>())).tx_packets as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(tx_packets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats64>())).rx_bytes as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(rx_bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats64>())).tx_bytes as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(tx_bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats64>())).rx_errors as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(rx_errors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats64>())).tx_errors as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(tx_errors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats64>())).rx_dropped as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(rx_dropped)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats64>())).tx_dropped as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(tx_dropped)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats64>())).multicast as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(multicast)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats64>())).collisions as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(collisions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rtnl_link_stats64>())).rx_length_errors as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(rx_length_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rtnl_link_stats64>())).rx_over_errors as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(rx_over_errors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats64>())).rx_crc_errors as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(rx_crc_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rtnl_link_stats64>())).rx_frame_errors as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(rx_frame_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rtnl_link_stats64>())).rx_fifo_errors as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(rx_fifo_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rtnl_link_stats64>())).rx_missed_errors as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(rx_missed_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rtnl_link_stats64>())).tx_aborted_errors as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(tx_aborted_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rtnl_link_stats64>())).tx_carrier_errors as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(tx_carrier_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rtnl_link_stats64>())).tx_fifo_errors as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(tx_fifo_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rtnl_link_stats64>())).tx_heartbeat_errors as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(tx_heartbeat_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rtnl_link_stats64>())).tx_window_errors as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(tx_window_errors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats64>())).rx_compressed as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(rx_compressed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats64>())).tx_compressed as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(tx_compressed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats64>())).rx_nohandler as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(rx_nohandler)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct rtnl_link_ifmap {
    pub mem_start: __u64,
    pub mem_end: __u64,
    pub base_addr: __u64,
    pub irq: __u16,
    pub dma: __u8,
    pub port: __u8,
}
#[test]
fn bindgen_test_layout_rtnl_link_ifmap() {
    assert_eq!(
        ::std::mem::size_of::<rtnl_link_ifmap>(),
        32usize,
        concat!("Size of: ", stringify!(rtnl_link_ifmap))
    );
    assert_eq!(
        ::std::mem::align_of::<rtnl_link_ifmap>(),
        8usize,
        concat!("Alignment of ", stringify!(rtnl_link_ifmap))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_ifmap>())).mem_start as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_ifmap),
            "::",
            stringify!(mem_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_ifmap>())).mem_end as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_ifmap),
            "::",
            stringify!(mem_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_ifmap>())).base_addr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_ifmap),
            "::",
            stringify!(base_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_ifmap>())).irq as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_ifmap),
            "::",
            stringify!(irq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_ifmap>())).dma as *const _ as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_ifmap),
            "::",
            stringify!(dma)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_ifmap>())).port as *const _ as usize },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_ifmap),
            "::",
            stringify!(port)
        )
    );
}
pub const IFLA_UNSPEC: _bindgen_ty_2 = 0;
pub const IFLA_ADDRESS: _bindgen_ty_2 = 1;
pub const IFLA_BROADCAST: _bindgen_ty_2 = 2;
pub const IFLA_IFNAME: _bindgen_ty_2 = 3;
pub const IFLA_MTU: _bindgen_ty_2 = 4;
pub const IFLA_LINK: _bindgen_ty_2 = 5;
pub const IFLA_QDISC: _bindgen_ty_2 = 6;
pub const IFLA_STATS: _bindgen_ty_2 = 7;
pub const IFLA_COST: _bindgen_ty_2 = 8;
pub const IFLA_PRIORITY: _bindgen_ty_2 = 9;
pub const IFLA_MASTER: _bindgen_ty_2 = 10;
pub const IFLA_WIRELESS: _bindgen_ty_2 = 11;
pub const IFLA_PROTINFO: _bindgen_ty_2 = 12;
pub const IFLA_TXQLEN: _bindgen_ty_2 = 13;
pub const IFLA_MAP: _bindgen_ty_2 = 14;
pub const IFLA_WEIGHT: _bindgen_ty_2 = 15;
pub const IFLA_OPERSTATE: _bindgen_ty_2 = 16;
pub const IFLA_LINKMODE: _bindgen_ty_2 = 17;
pub const IFLA_LINKINFO: _bindgen_ty_2 = 18;
pub const IFLA_NET_NS_PID: _bindgen_ty_2 = 19;
pub const IFLA_IFALIAS: _bindgen_ty_2 = 20;
pub const IFLA_NUM_VF: _bindgen_ty_2 = 21;
pub const IFLA_VFINFO_LIST: _bindgen_ty_2 = 22;
pub const IFLA_STATS64: _bindgen_ty_2 = 23;
pub const IFLA_VF_PORTS: _bindgen_ty_2 = 24;
pub const IFLA_PORT_SELF: _bindgen_ty_2 = 25;
pub const IFLA_AF_SPEC: _bindgen_ty_2 = 26;
pub const IFLA_GROUP: _bindgen_ty_2 = 27;
pub const IFLA_NET_NS_FD: _bindgen_ty_2 = 28;
pub const IFLA_EXT_MASK: _bindgen_ty_2 = 29;
pub const IFLA_PROMISCUITY: _bindgen_ty_2 = 30;
pub const IFLA_NUM_TX_QUEUES: _bindgen_ty_2 = 31;
pub const IFLA_NUM_RX_QUEUES: _bindgen_ty_2 = 32;
pub const IFLA_CARRIER: _bindgen_ty_2 = 33;
pub const IFLA_PHYS_PORT_ID: _bindgen_ty_2 = 34;
pub const IFLA_CARRIER_CHANGES: _bindgen_ty_2 = 35;
pub const IFLA_PHYS_SWITCH_ID: _bindgen_ty_2 = 36;
pub const IFLA_LINK_NETNSID: _bindgen_ty_2 = 37;
pub const IFLA_PHYS_PORT_NAME: _bindgen_ty_2 = 38;
pub const IFLA_PROTO_DOWN: _bindgen_ty_2 = 39;
pub const IFLA_GSO_MAX_SEGS: _bindgen_ty_2 = 40;
pub const IFLA_GSO_MAX_SIZE: _bindgen_ty_2 = 41;
pub const IFLA_PAD: _bindgen_ty_2 = 42;
pub const IFLA_XDP: _bindgen_ty_2 = 43;
pub const IFLA_EVENT: _bindgen_ty_2 = 44;
pub const IFLA_NEW_NETNSID: _bindgen_ty_2 = 45;
pub const IFLA_IF_NETNSID: _bindgen_ty_2 = 46;
pub const IFLA_TARGET_NETNSID: _bindgen_ty_2 = 46;
pub const IFLA_CARRIER_UP_COUNT: _bindgen_ty_2 = 47;
pub const IFLA_CARRIER_DOWN_COUNT: _bindgen_ty_2 = 48;
pub const IFLA_NEW_IFINDEX: _bindgen_ty_2 = 49;
pub const IFLA_MIN_MTU: _bindgen_ty_2 = 50;
pub const IFLA_MAX_MTU: _bindgen_ty_2 = 51;
pub const __IFLA_MAX: _bindgen_ty_2 = 52;
pub type _bindgen_ty_2 = u32;
pub const IFLA_INET_UNSPEC: _bindgen_ty_3 = 0;
pub const IFLA_INET_CONF: _bindgen_ty_3 = 1;
pub const __IFLA_INET_MAX: _bindgen_ty_3 = 2;
pub type _bindgen_ty_3 = u32;
pub const IFLA_INET6_UNSPEC: _bindgen_ty_4 = 0;
pub const IFLA_INET6_FLAGS: _bindgen_ty_4 = 1;
pub const IFLA_INET6_CONF: _bindgen_ty_4 = 2;
pub const IFLA_INET6_STATS: _bindgen_ty_4 = 3;
pub const IFLA_INET6_MCAST: _bindgen_ty_4 = 4;
pub const IFLA_INET6_CACHEINFO: _bindgen_ty_4 = 5;
pub const IFLA_INET6_ICMP6STATS: _bindgen_ty_4 = 6;
pub const IFLA_INET6_TOKEN: _bindgen_ty_4 = 7;
pub const IFLA_INET6_ADDR_GEN_MODE: _bindgen_ty_4 = 8;
pub const __IFLA_INET6_MAX: _bindgen_ty_4 = 9;
pub type _bindgen_ty_4 = u32;
pub const in6_addr_gen_mode_IN6_ADDR_GEN_MODE_EUI64: in6_addr_gen_mode = 0;
pub const in6_addr_gen_mode_IN6_ADDR_GEN_MODE_NONE: in6_addr_gen_mode = 1;
pub const in6_addr_gen_mode_IN6_ADDR_GEN_MODE_STABLE_PRIVACY: in6_addr_gen_mode = 2;
pub const in6_addr_gen_mode_IN6_ADDR_GEN_MODE_RANDOM: in6_addr_gen_mode = 3;
pub type in6_addr_gen_mode = u32;
pub const IFLA_BR_UNSPEC: _bindgen_ty_5 = 0;
pub const IFLA_BR_FORWARD_DELAY: _bindgen_ty_5 = 1;
pub const IFLA_BR_HELLO_TIME: _bindgen_ty_5 = 2;
pub const IFLA_BR_MAX_AGE: _bindgen_ty_5 = 3;
pub const IFLA_BR_AGEING_TIME: _bindgen_ty_5 = 4;
pub const IFLA_BR_STP_STATE: _bindgen_ty_5 = 5;
pub const IFLA_BR_PRIORITY: _bindgen_ty_5 = 6;
pub const IFLA_BR_VLAN_FILTERING: _bindgen_ty_5 = 7;
pub const IFLA_BR_VLAN_PROTOCOL: _bindgen_ty_5 = 8;
pub const IFLA_BR_GROUP_FWD_MASK: _bindgen_ty_5 = 9;
pub const IFLA_BR_ROOT_ID: _bindgen_ty_5 = 10;
pub const IFLA_BR_BRIDGE_ID: _bindgen_ty_5 = 11;
pub const IFLA_BR_ROOT_PORT: _bindgen_ty_5 = 12;
pub const IFLA_BR_ROOT_PATH_COST: _bindgen_ty_5 = 13;
pub const IFLA_BR_TOPOLOGY_CHANGE: _bindgen_ty_5 = 14;
pub const IFLA_BR_TOPOLOGY_CHANGE_DETECTED: _bindgen_ty_5 = 15;
pub const IFLA_BR_HELLO_TIMER: _bindgen_ty_5 = 16;
pub const IFLA_BR_TCN_TIMER: _bindgen_ty_5 = 17;
pub const IFLA_BR_TOPOLOGY_CHANGE_TIMER: _bindgen_ty_5 = 18;
pub const IFLA_BR_GC_TIMER: _bindgen_ty_5 = 19;
pub const IFLA_BR_GROUP_ADDR: _bindgen_ty_5 = 20;
pub const IFLA_BR_FDB_FLUSH: _bindgen_ty_5 = 21;
pub const IFLA_BR_MCAST_ROUTER: _bindgen_ty_5 = 22;
pub const IFLA_BR_MCAST_SNOOPING: _bindgen_ty_5 = 23;
pub const IFLA_BR_MCAST_QUERY_USE_IFADDR: _bindgen_ty_5 = 24;
pub const IFLA_BR_MCAST_QUERIER: _bindgen_ty_5 = 25;
pub const IFLA_BR_MCAST_HASH_ELASTICITY: _bindgen_ty_5 = 26;
pub const IFLA_BR_MCAST_HASH_MAX: _bindgen_ty_5 = 27;
pub const IFLA_BR_MCAST_LAST_MEMBER_CNT: _bindgen_ty_5 = 28;
pub const IFLA_BR_MCAST_STARTUP_QUERY_CNT: _bindgen_ty_5 = 29;
pub const IFLA_BR_MCAST_LAST_MEMBER_INTVL: _bindgen_ty_5 = 30;
pub const IFLA_BR_MCAST_MEMBERSHIP_INTVL: _bindgen_ty_5 = 31;
pub const IFLA_BR_MCAST_QUERIER_INTVL: _bindgen_ty_5 = 32;
pub const IFLA_BR_MCAST_QUERY_INTVL: _bindgen_ty_5 = 33;
pub const IFLA_BR_MCAST_QUERY_RESPONSE_INTVL: _bindgen_ty_5 = 34;
pub const IFLA_BR_MCAST_STARTUP_QUERY_INTVL: _bindgen_ty_5 = 35;
pub const IFLA_BR_NF_CALL_IPTABLES: _bindgen_ty_5 = 36;
pub const IFLA_BR_NF_CALL_IP6TABLES: _bindgen_ty_5 = 37;
pub const IFLA_BR_NF_CALL_ARPTABLES: _bindgen_ty_5 = 38;
pub const IFLA_BR_VLAN_DEFAULT_PVID: _bindgen_ty_5 = 39;
pub const IFLA_BR_PAD: _bindgen_ty_5 = 40;
pub const IFLA_BR_VLAN_STATS_ENABLED: _bindgen_ty_5 = 41;
pub const IFLA_BR_MCAST_STATS_ENABLED: _bindgen_ty_5 = 42;
pub const IFLA_BR_MCAST_IGMP_VERSION: _bindgen_ty_5 = 43;
pub const IFLA_BR_MCAST_MLD_VERSION: _bindgen_ty_5 = 44;
pub const IFLA_BR_VLAN_STATS_PER_PORT: _bindgen_ty_5 = 45;
pub const IFLA_BR_MULTI_BOOLOPT: _bindgen_ty_5 = 46;
pub const __IFLA_BR_MAX: _bindgen_ty_5 = 47;
pub type _bindgen_ty_5 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct ifla_bridge_id {
    pub prio: [__u8; 2usize],
    pub addr: [__u8; 6usize],
}
#[test]
fn bindgen_test_layout_ifla_bridge_id() {
    assert_eq!(
        ::std::mem::size_of::<ifla_bridge_id>(),
        8usize,
        concat!("Size of: ", stringify!(ifla_bridge_id))
    );
    assert_eq!(
        ::std::mem::align_of::<ifla_bridge_id>(),
        1usize,
        concat!("Alignment of ", stringify!(ifla_bridge_id))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_bridge_id>())).prio as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_bridge_id),
            "::",
            stringify!(prio)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_bridge_id>())).addr as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_bridge_id),
            "::",
            stringify!(addr)
        )
    );
}
pub const BRIDGE_MODE_UNSPEC: _bindgen_ty_6 = 0;
pub const BRIDGE_MODE_HAIRPIN: _bindgen_ty_6 = 1;
pub type _bindgen_ty_6 = u32;
pub const IFLA_BRPORT_UNSPEC: _bindgen_ty_7 = 0;
pub const IFLA_BRPORT_STATE: _bindgen_ty_7 = 1;
pub const IFLA_BRPORT_PRIORITY: _bindgen_ty_7 = 2;
pub const IFLA_BRPORT_COST: _bindgen_ty_7 = 3;
pub const IFLA_BRPORT_MODE: _bindgen_ty_7 = 4;
pub const IFLA_BRPORT_GUARD: _bindgen_ty_7 = 5;
pub const IFLA_BRPORT_PROTECT: _bindgen_ty_7 = 6;
pub const IFLA_BRPORT_FAST_LEAVE: _bindgen_ty_7 = 7;
pub const IFLA_BRPORT_LEARNING: _bindgen_ty_7 = 8;
pub const IFLA_BRPORT_UNICAST_FLOOD: _bindgen_ty_7 = 9;
pub const IFLA_BRPORT_PROXYARP: _bindgen_ty_7 = 10;
pub const IFLA_BRPORT_LEARNING_SYNC: _bindgen_ty_7 = 11;
pub const IFLA_BRPORT_PROXYARP_WIFI: _bindgen_ty_7 = 12;
pub const IFLA_BRPORT_ROOT_ID: _bindgen_ty_7 = 13;
pub const IFLA_BRPORT_BRIDGE_ID: _bindgen_ty_7 = 14;
pub const IFLA_BRPORT_DESIGNATED_PORT: _bindgen_ty_7 = 15;
pub const IFLA_BRPORT_DESIGNATED_COST: _bindgen_ty_7 = 16;
pub const IFLA_BRPORT_ID: _bindgen_ty_7 = 17;
pub const IFLA_BRPORT_NO: _bindgen_ty_7 = 18;
pub const IFLA_BRPORT_TOPOLOGY_CHANGE_ACK: _bindgen_ty_7 = 19;
pub const IFLA_BRPORT_CONFIG_PENDING: _bindgen_ty_7 = 20;
pub const IFLA_BRPORT_MESSAGE_AGE_TIMER: _bindgen_ty_7 = 21;
pub const IFLA_BRPORT_FORWARD_DELAY_TIMER: _bindgen_ty_7 = 22;
pub const IFLA_BRPORT_HOLD_TIMER: _bindgen_ty_7 = 23;
pub const IFLA_BRPORT_FLUSH: _bindgen_ty_7 = 24;
pub const IFLA_BRPORT_MULTICAST_ROUTER: _bindgen_ty_7 = 25;
pub const IFLA_BRPORT_PAD: _bindgen_ty_7 = 26;
pub const IFLA_BRPORT_MCAST_FLOOD: _bindgen_ty_7 = 27;
pub const IFLA_BRPORT_MCAST_TO_UCAST: _bindgen_ty_7 = 28;
pub const IFLA_BRPORT_VLAN_TUNNEL: _bindgen_ty_7 = 29;
pub const IFLA_BRPORT_BCAST_FLOOD: _bindgen_ty_7 = 30;
pub const IFLA_BRPORT_GROUP_FWD_MASK: _bindgen_ty_7 = 31;
pub const IFLA_BRPORT_NEIGH_SUPPRESS: _bindgen_ty_7 = 32;
pub const IFLA_BRPORT_ISOLATED: _bindgen_ty_7 = 33;
pub const IFLA_BRPORT_BACKUP_PORT: _bindgen_ty_7 = 34;
pub const __IFLA_BRPORT_MAX: _bindgen_ty_7 = 35;
pub type _bindgen_ty_7 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct ifla_cacheinfo {
    pub max_reasm_len: __u32,
    pub tstamp: __u32,
    pub reachable_time: __u32,
    pub retrans_time: __u32,
}
#[test]
fn bindgen_test_layout_ifla_cacheinfo() {
    assert_eq!(
        ::std::mem::size_of::<ifla_cacheinfo>(),
        16usize,
        concat!("Size of: ", stringify!(ifla_cacheinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<ifla_cacheinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(ifla_cacheinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_cacheinfo>())).max_reasm_len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_cacheinfo),
            "::",
            stringify!(max_reasm_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_cacheinfo>())).tstamp as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_cacheinfo),
            "::",
            stringify!(tstamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_cacheinfo>())).reachable_time as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_cacheinfo),
            "::",
            stringify!(reachable_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_cacheinfo>())).retrans_time as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_cacheinfo),
            "::",
            stringify!(retrans_time)
        )
    );
}
pub const IFLA_INFO_UNSPEC: _bindgen_ty_8 = 0;
pub const IFLA_INFO_KIND: _bindgen_ty_8 = 1;
pub const IFLA_INFO_DATA: _bindgen_ty_8 = 2;
pub const IFLA_INFO_XSTATS: _bindgen_ty_8 = 3;
pub const IFLA_INFO_SLAVE_KIND: _bindgen_ty_8 = 4;
pub const IFLA_INFO_SLAVE_DATA: _bindgen_ty_8 = 5;
pub const __IFLA_INFO_MAX: _bindgen_ty_8 = 6;
pub type _bindgen_ty_8 = u32;
pub const IFLA_VLAN_UNSPEC: _bindgen_ty_9 = 0;
pub const IFLA_VLAN_ID: _bindgen_ty_9 = 1;
pub const IFLA_VLAN_FLAGS: _bindgen_ty_9 = 2;
pub const IFLA_VLAN_EGRESS_QOS: _bindgen_ty_9 = 3;
pub const IFLA_VLAN_INGRESS_QOS: _bindgen_ty_9 = 4;
pub const IFLA_VLAN_PROTOCOL: _bindgen_ty_9 = 5;
pub const __IFLA_VLAN_MAX: _bindgen_ty_9 = 6;
pub type _bindgen_ty_9 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct ifla_vlan_flags {
    pub flags: __u32,
    pub mask: __u32,
}
#[test]
fn bindgen_test_layout_ifla_vlan_flags() {
    assert_eq!(
        ::std::mem::size_of::<ifla_vlan_flags>(),
        8usize,
        concat!("Size of: ", stringify!(ifla_vlan_flags))
    );
    assert_eq!(
        ::std::mem::align_of::<ifla_vlan_flags>(),
        4usize,
        concat!("Alignment of ", stringify!(ifla_vlan_flags))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vlan_flags>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vlan_flags),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vlan_flags>())).mask as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vlan_flags),
            "::",
            stringify!(mask)
        )
    );
}
pub const IFLA_VLAN_QOS_UNSPEC: _bindgen_ty_10 = 0;
pub const IFLA_VLAN_QOS_MAPPING: _bindgen_ty_10 = 1;
pub const __IFLA_VLAN_QOS_MAX: _bindgen_ty_10 = 2;
pub type _bindgen_ty_10 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct ifla_vlan_qos_mapping {
    pub from: __u32,
    pub to: __u32,
}
#[test]
fn bindgen_test_layout_ifla_vlan_qos_mapping() {
    assert_eq!(
        ::std::mem::size_of::<ifla_vlan_qos_mapping>(),
        8usize,
        concat!("Size of: ", stringify!(ifla_vlan_qos_mapping))
    );
    assert_eq!(
        ::std::mem::align_of::<ifla_vlan_qos_mapping>(),
        4usize,
        concat!("Alignment of ", stringify!(ifla_vlan_qos_mapping))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vlan_qos_mapping>())).from as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vlan_qos_mapping),
            "::",
            stringify!(from)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vlan_qos_mapping>())).to as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vlan_qos_mapping),
            "::",
            stringify!(to)
        )
    );
}
pub const IFLA_MACVLAN_UNSPEC: _bindgen_ty_11 = 0;
pub const IFLA_MACVLAN_MODE: _bindgen_ty_11 = 1;
pub const IFLA_MACVLAN_FLAGS: _bindgen_ty_11 = 2;
pub const IFLA_MACVLAN_MACADDR_MODE: _bindgen_ty_11 = 3;
pub const IFLA_MACVLAN_MACADDR: _bindgen_ty_11 = 4;
pub const IFLA_MACVLAN_MACADDR_DATA: _bindgen_ty_11 = 5;
pub const IFLA_MACVLAN_MACADDR_COUNT: _bindgen_ty_11 = 6;
pub const __IFLA_MACVLAN_MAX: _bindgen_ty_11 = 7;
pub type _bindgen_ty_11 = u32;
pub const macvlan_mode_MACVLAN_MODE_PRIVATE: macvlan_mode = 1;
pub const macvlan_mode_MACVLAN_MODE_VEPA: macvlan_mode = 2;
pub const macvlan_mode_MACVLAN_MODE_BRIDGE: macvlan_mode = 4;
pub const macvlan_mode_MACVLAN_MODE_PASSTHRU: macvlan_mode = 8;
pub const macvlan_mode_MACVLAN_MODE_SOURCE: macvlan_mode = 16;
pub type macvlan_mode = u32;
pub const macvlan_macaddr_mode_MACVLAN_MACADDR_ADD: macvlan_macaddr_mode = 0;
pub const macvlan_macaddr_mode_MACVLAN_MACADDR_DEL: macvlan_macaddr_mode = 1;
pub const macvlan_macaddr_mode_MACVLAN_MACADDR_FLUSH: macvlan_macaddr_mode = 2;
pub const macvlan_macaddr_mode_MACVLAN_MACADDR_SET: macvlan_macaddr_mode = 3;
pub type macvlan_macaddr_mode = u32;
pub const IFLA_VRF_UNSPEC: _bindgen_ty_12 = 0;
pub const IFLA_VRF_TABLE: _bindgen_ty_12 = 1;
pub const __IFLA_VRF_MAX: _bindgen_ty_12 = 2;
pub type _bindgen_ty_12 = u32;
pub const IFLA_VRF_PORT_UNSPEC: _bindgen_ty_13 = 0;
pub const IFLA_VRF_PORT_TABLE: _bindgen_ty_13 = 1;
pub const __IFLA_VRF_PORT_MAX: _bindgen_ty_13 = 2;
pub type _bindgen_ty_13 = u32;
pub const IFLA_MACSEC_UNSPEC: _bindgen_ty_14 = 0;
pub const IFLA_MACSEC_SCI: _bindgen_ty_14 = 1;
pub const IFLA_MACSEC_PORT: _bindgen_ty_14 = 2;
pub const IFLA_MACSEC_ICV_LEN: _bindgen_ty_14 = 3;
pub const IFLA_MACSEC_CIPHER_SUITE: _bindgen_ty_14 = 4;
pub const IFLA_MACSEC_WINDOW: _bindgen_ty_14 = 5;
pub const IFLA_MACSEC_ENCODING_SA: _bindgen_ty_14 = 6;
pub const IFLA_MACSEC_ENCRYPT: _bindgen_ty_14 = 7;
pub const IFLA_MACSEC_PROTECT: _bindgen_ty_14 = 8;
pub const IFLA_MACSEC_INC_SCI: _bindgen_ty_14 = 9;
pub const IFLA_MACSEC_ES: _bindgen_ty_14 = 10;
pub const IFLA_MACSEC_SCB: _bindgen_ty_14 = 11;
pub const IFLA_MACSEC_REPLAY_PROTECT: _bindgen_ty_14 = 12;
pub const IFLA_MACSEC_VALIDATION: _bindgen_ty_14 = 13;
pub const IFLA_MACSEC_PAD: _bindgen_ty_14 = 14;
pub const __IFLA_MACSEC_MAX: _bindgen_ty_14 = 15;
pub type _bindgen_ty_14 = u32;
pub const IFLA_XFRM_UNSPEC: _bindgen_ty_15 = 0;
pub const IFLA_XFRM_LINK: _bindgen_ty_15 = 1;
pub const IFLA_XFRM_IF_ID: _bindgen_ty_15 = 2;
pub const __IFLA_XFRM_MAX: _bindgen_ty_15 = 3;
pub type _bindgen_ty_15 = u32;
pub const macsec_validation_type_MACSEC_VALIDATE_DISABLED: macsec_validation_type = 0;
pub const macsec_validation_type_MACSEC_VALIDATE_CHECK: macsec_validation_type = 1;
pub const macsec_validation_type_MACSEC_VALIDATE_STRICT: macsec_validation_type = 2;
pub const macsec_validation_type___MACSEC_VALIDATE_END: macsec_validation_type = 3;
pub const macsec_validation_type_MACSEC_VALIDATE_MAX: macsec_validation_type = 2;
pub type macsec_validation_type = u32;
pub const IFLA_IPVLAN_UNSPEC: _bindgen_ty_16 = 0;
pub const IFLA_IPVLAN_MODE: _bindgen_ty_16 = 1;
pub const IFLA_IPVLAN_FLAGS: _bindgen_ty_16 = 2;
pub const __IFLA_IPVLAN_MAX: _bindgen_ty_16 = 3;
pub type _bindgen_ty_16 = u32;
pub const ipvlan_mode_IPVLAN_MODE_L2: ipvlan_mode = 0;
pub const ipvlan_mode_IPVLAN_MODE_L3: ipvlan_mode = 1;
pub const ipvlan_mode_IPVLAN_MODE_L3S: ipvlan_mode = 2;
pub const ipvlan_mode_IPVLAN_MODE_MAX: ipvlan_mode = 3;
pub type ipvlan_mode = u32;
pub const IFLA_VXLAN_UNSPEC: _bindgen_ty_17 = 0;
pub const IFLA_VXLAN_ID: _bindgen_ty_17 = 1;
pub const IFLA_VXLAN_GROUP: _bindgen_ty_17 = 2;
pub const IFLA_VXLAN_LINK: _bindgen_ty_17 = 3;
pub const IFLA_VXLAN_LOCAL: _bindgen_ty_17 = 4;
pub const IFLA_VXLAN_TTL: _bindgen_ty_17 = 5;
pub const IFLA_VXLAN_TOS: _bindgen_ty_17 = 6;
pub const IFLA_VXLAN_LEARNING: _bindgen_ty_17 = 7;
pub const IFLA_VXLAN_AGEING: _bindgen_ty_17 = 8;
pub const IFLA_VXLAN_LIMIT: _bindgen_ty_17 = 9;
pub const IFLA_VXLAN_PORT_RANGE: _bindgen_ty_17 = 10;
pub const IFLA_VXLAN_PROXY: _bindgen_ty_17 = 11;
pub const IFLA_VXLAN_RSC: _bindgen_ty_17 = 12;
pub const IFLA_VXLAN_L2MISS: _bindgen_ty_17 = 13;
pub const IFLA_VXLAN_L3MISS: _bindgen_ty_17 = 14;
pub const IFLA_VXLAN_PORT: _bindgen_ty_17 = 15;
pub const IFLA_VXLAN_GROUP6: _bindgen_ty_17 = 16;
pub const IFLA_VXLAN_LOCAL6: _bindgen_ty_17 = 17;
pub const IFLA_VXLAN_UDP_CSUM: _bindgen_ty_17 = 18;
pub const IFLA_VXLAN_UDP_ZERO_CSUM6_TX: _bindgen_ty_17 = 19;
pub const IFLA_VXLAN_UDP_ZERO_CSUM6_RX: _bindgen_ty_17 = 20;
pub const IFLA_VXLAN_REMCSUM_TX: _bindgen_ty_17 = 21;
pub const IFLA_VXLAN_REMCSUM_RX: _bindgen_ty_17 = 22;
pub const IFLA_VXLAN_GBP: _bindgen_ty_17 = 23;
pub const IFLA_VXLAN_REMCSUM_NOPARTIAL: _bindgen_ty_17 = 24;
pub const IFLA_VXLAN_COLLECT_METADATA: _bindgen_ty_17 = 25;
pub const IFLA_VXLAN_LABEL: _bindgen_ty_17 = 26;
pub const IFLA_VXLAN_GPE: _bindgen_ty_17 = 27;
pub const IFLA_VXLAN_TTL_INHERIT: _bindgen_ty_17 = 28;
pub const IFLA_VXLAN_DF: _bindgen_ty_17 = 29;
pub const __IFLA_VXLAN_MAX: _bindgen_ty_17 = 30;
pub type _bindgen_ty_17 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct ifla_vxlan_port_range {
    pub low: __be16,
    pub high: __be16,
}
#[test]
fn bindgen_test_layout_ifla_vxlan_port_range() {
    assert_eq!(
        ::std::mem::size_of::<ifla_vxlan_port_range>(),
        4usize,
        concat!("Size of: ", stringify!(ifla_vxlan_port_range))
    );
    assert_eq!(
        ::std::mem::align_of::<ifla_vxlan_port_range>(),
        2usize,
        concat!("Alignment of ", stringify!(ifla_vxlan_port_range))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vxlan_port_range>())).low as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vxlan_port_range),
            "::",
            stringify!(low)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vxlan_port_range>())).high as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vxlan_port_range),
            "::",
            stringify!(high)
        )
    );
}
pub const ifla_vxlan_df_VXLAN_DF_UNSET: ifla_vxlan_df = 0;
pub const ifla_vxlan_df_VXLAN_DF_SET: ifla_vxlan_df = 1;
pub const ifla_vxlan_df_VXLAN_DF_INHERIT: ifla_vxlan_df = 2;
pub const ifla_vxlan_df___VXLAN_DF_END: ifla_vxlan_df = 3;
pub const ifla_vxlan_df_VXLAN_DF_MAX: ifla_vxlan_df = 2;
pub type ifla_vxlan_df = u32;
pub const IFLA_GENEVE_UNSPEC: _bindgen_ty_18 = 0;
pub const IFLA_GENEVE_ID: _bindgen_ty_18 = 1;
pub const IFLA_GENEVE_REMOTE: _bindgen_ty_18 = 2;
pub const IFLA_GENEVE_TTL: _bindgen_ty_18 = 3;
pub const IFLA_GENEVE_TOS: _bindgen_ty_18 = 4;
pub const IFLA_GENEVE_PORT: _bindgen_ty_18 = 5;
pub const IFLA_GENEVE_COLLECT_METADATA: _bindgen_ty_18 = 6;
pub const IFLA_GENEVE_REMOTE6: _bindgen_ty_18 = 7;
pub const IFLA_GENEVE_UDP_CSUM: _bindgen_ty_18 = 8;
pub const IFLA_GENEVE_UDP_ZERO_CSUM6_TX: _bindgen_ty_18 = 9;
pub const IFLA_GENEVE_UDP_ZERO_CSUM6_RX: _bindgen_ty_18 = 10;
pub const IFLA_GENEVE_LABEL: _bindgen_ty_18 = 11;
pub const IFLA_GENEVE_TTL_INHERIT: _bindgen_ty_18 = 12;
pub const IFLA_GENEVE_DF: _bindgen_ty_18 = 13;
pub const __IFLA_GENEVE_MAX: _bindgen_ty_18 = 14;
pub type _bindgen_ty_18 = u32;
pub const ifla_geneve_df_GENEVE_DF_UNSET: ifla_geneve_df = 0;
pub const ifla_geneve_df_GENEVE_DF_SET: ifla_geneve_df = 1;
pub const ifla_geneve_df_GENEVE_DF_INHERIT: ifla_geneve_df = 2;
pub const ifla_geneve_df___GENEVE_DF_END: ifla_geneve_df = 3;
pub const ifla_geneve_df_GENEVE_DF_MAX: ifla_geneve_df = 2;
pub type ifla_geneve_df = u32;
pub const IFLA_PPP_UNSPEC: _bindgen_ty_19 = 0;
pub const IFLA_PPP_DEV_FD: _bindgen_ty_19 = 1;
pub const __IFLA_PPP_MAX: _bindgen_ty_19 = 2;
pub type _bindgen_ty_19 = u32;
pub const ifla_gtp_role_GTP_ROLE_GGSN: ifla_gtp_role = 0;
pub const ifla_gtp_role_GTP_ROLE_SGSN: ifla_gtp_role = 1;
pub type ifla_gtp_role = u32;
pub const IFLA_GTP_UNSPEC: _bindgen_ty_20 = 0;
pub const IFLA_GTP_FD0: _bindgen_ty_20 = 1;
pub const IFLA_GTP_FD1: _bindgen_ty_20 = 2;
pub const IFLA_GTP_PDP_HASHSIZE: _bindgen_ty_20 = 3;
pub const IFLA_GTP_ROLE: _bindgen_ty_20 = 4;
pub const __IFLA_GTP_MAX: _bindgen_ty_20 = 5;
pub type _bindgen_ty_20 = u32;
pub const IFLA_BOND_UNSPEC: _bindgen_ty_21 = 0;
pub const IFLA_BOND_MODE: _bindgen_ty_21 = 1;
pub const IFLA_BOND_ACTIVE_SLAVE: _bindgen_ty_21 = 2;
pub const IFLA_BOND_MIIMON: _bindgen_ty_21 = 3;
pub const IFLA_BOND_UPDELAY: _bindgen_ty_21 = 4;
pub const IFLA_BOND_DOWNDELAY: _bindgen_ty_21 = 5;
pub const IFLA_BOND_USE_CARRIER: _bindgen_ty_21 = 6;
pub const IFLA_BOND_ARP_INTERVAL: _bindgen_ty_21 = 7;
pub const IFLA_BOND_ARP_IP_TARGET: _bindgen_ty_21 = 8;
pub const IFLA_BOND_ARP_VALIDATE: _bindgen_ty_21 = 9;
pub const IFLA_BOND_ARP_ALL_TARGETS: _bindgen_ty_21 = 10;
pub const IFLA_BOND_PRIMARY: _bindgen_ty_21 = 11;
pub const IFLA_BOND_PRIMARY_RESELECT: _bindgen_ty_21 = 12;
pub const IFLA_BOND_FAIL_OVER_MAC: _bindgen_ty_21 = 13;
pub const IFLA_BOND_XMIT_HASH_POLICY: _bindgen_ty_21 = 14;
pub const IFLA_BOND_RESEND_IGMP: _bindgen_ty_21 = 15;
pub const IFLA_BOND_NUM_PEER_NOTIF: _bindgen_ty_21 = 16;
pub const IFLA_BOND_ALL_SLAVES_ACTIVE: _bindgen_ty_21 = 17;
pub const IFLA_BOND_MIN_LINKS: _bindgen_ty_21 = 18;
pub const IFLA_BOND_LP_INTERVAL: _bindgen_ty_21 = 19;
pub const IFLA_BOND_PACKETS_PER_SLAVE: _bindgen_ty_21 = 20;
pub const IFLA_BOND_AD_LACP_RATE: _bindgen_ty_21 = 21;
pub const IFLA_BOND_AD_SELECT: _bindgen_ty_21 = 22;
pub const IFLA_BOND_AD_INFO: _bindgen_ty_21 = 23;
pub const IFLA_BOND_AD_ACTOR_SYS_PRIO: _bindgen_ty_21 = 24;
pub const IFLA_BOND_AD_USER_PORT_KEY: _bindgen_ty_21 = 25;
pub const IFLA_BOND_AD_ACTOR_SYSTEM: _bindgen_ty_21 = 26;
pub const IFLA_BOND_TLB_DYNAMIC_LB: _bindgen_ty_21 = 27;
pub const IFLA_BOND_PEER_NOTIF_DELAY: _bindgen_ty_21 = 28;
pub const __IFLA_BOND_MAX: _bindgen_ty_21 = 29;
pub type _bindgen_ty_21 = u32;
pub const IFLA_BOND_AD_INFO_UNSPEC: _bindgen_ty_22 = 0;
pub const IFLA_BOND_AD_INFO_AGGREGATOR: _bindgen_ty_22 = 1;
pub const IFLA_BOND_AD_INFO_NUM_PORTS: _bindgen_ty_22 = 2;
pub const IFLA_BOND_AD_INFO_ACTOR_KEY: _bindgen_ty_22 = 3;
pub const IFLA_BOND_AD_INFO_PARTNER_KEY: _bindgen_ty_22 = 4;
pub const IFLA_BOND_AD_INFO_PARTNER_MAC: _bindgen_ty_22 = 5;
pub const __IFLA_BOND_AD_INFO_MAX: _bindgen_ty_22 = 6;
pub type _bindgen_ty_22 = u32;
pub const IFLA_BOND_SLAVE_UNSPEC: _bindgen_ty_23 = 0;
pub const IFLA_BOND_SLAVE_STATE: _bindgen_ty_23 = 1;
pub const IFLA_BOND_SLAVE_MII_STATUS: _bindgen_ty_23 = 2;
pub const IFLA_BOND_SLAVE_LINK_FAILURE_COUNT: _bindgen_ty_23 = 3;
pub const IFLA_BOND_SLAVE_PERM_HWADDR: _bindgen_ty_23 = 4;
pub const IFLA_BOND_SLAVE_QUEUE_ID: _bindgen_ty_23 = 5;
pub const IFLA_BOND_SLAVE_AD_AGGREGATOR_ID: _bindgen_ty_23 = 6;
pub const IFLA_BOND_SLAVE_AD_ACTOR_OPER_PORT_STATE: _bindgen_ty_23 = 7;
pub const IFLA_BOND_SLAVE_AD_PARTNER_OPER_PORT_STATE: _bindgen_ty_23 = 8;
pub const __IFLA_BOND_SLAVE_MAX: _bindgen_ty_23 = 9;
pub type _bindgen_ty_23 = u32;
pub const IFLA_VF_INFO_UNSPEC: _bindgen_ty_24 = 0;
pub const IFLA_VF_INFO: _bindgen_ty_24 = 1;
pub const __IFLA_VF_INFO_MAX: _bindgen_ty_24 = 2;
pub type _bindgen_ty_24 = u32;
pub const IFLA_VF_UNSPEC: _bindgen_ty_25 = 0;
pub const IFLA_VF_MAC: _bindgen_ty_25 = 1;
pub const IFLA_VF_VLAN: _bindgen_ty_25 = 2;
pub const IFLA_VF_TX_RATE: _bindgen_ty_25 = 3;
pub const IFLA_VF_SPOOFCHK: _bindgen_ty_25 = 4;
pub const IFLA_VF_LINK_STATE: _bindgen_ty_25 = 5;
pub const IFLA_VF_RATE: _bindgen_ty_25 = 6;
pub const IFLA_VF_RSS_QUERY_EN: _bindgen_ty_25 = 7;
pub const IFLA_VF_STATS: _bindgen_ty_25 = 8;
pub const IFLA_VF_TRUST: _bindgen_ty_25 = 9;
pub const IFLA_VF_IB_NODE_GUID: _bindgen_ty_25 = 10;
pub const IFLA_VF_IB_PORT_GUID: _bindgen_ty_25 = 11;
pub const IFLA_VF_VLAN_LIST: _bindgen_ty_25 = 12;
pub const IFLA_VF_BROADCAST: _bindgen_ty_25 = 13;
pub const __IFLA_VF_MAX: _bindgen_ty_25 = 14;
pub type _bindgen_ty_25 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct ifla_vf_mac {
    pub vf: __u32,
    pub mac: [__u8; 32usize],
}
#[test]
fn bindgen_test_layout_ifla_vf_mac() {
    assert_eq!(
        ::std::mem::size_of::<ifla_vf_mac>(),
        36usize,
        concat!("Size of: ", stringify!(ifla_vf_mac))
    );
    assert_eq!(
        ::std::mem::align_of::<ifla_vf_mac>(),
        4usize,
        concat!("Alignment of ", stringify!(ifla_vf_mac))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_mac>())).vf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_mac),
            "::",
            stringify!(vf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_mac>())).mac as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_mac),
            "::",
            stringify!(mac)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct ifla_vf_broadcast {
    pub broadcast: [__u8; 32usize],
}
#[test]
fn bindgen_test_layout_ifla_vf_broadcast() {
    assert_eq!(
        ::std::mem::size_of::<ifla_vf_broadcast>(),
        32usize,
        concat!("Size of: ", stringify!(ifla_vf_broadcast))
    );
    assert_eq!(
        ::std::mem::align_of::<ifla_vf_broadcast>(),
        1usize,
        concat!("Alignment of ", stringify!(ifla_vf_broadcast))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_broadcast>())).broadcast as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_broadcast),
            "::",
            stringify!(broadcast)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct ifla_vf_vlan {
    pub vf: __u32,
    pub vlan: __u32,
    pub qos: __u32,
}
#[test]
fn bindgen_test_layout_ifla_vf_vlan() {
    assert_eq!(
        ::std::mem::size_of::<ifla_vf_vlan>(),
        12usize,
        concat!("Size of: ", stringify!(ifla_vf_vlan))
    );
    assert_eq!(
        ::std::mem::align_of::<ifla_vf_vlan>(),
        4usize,
        concat!("Alignment of ", stringify!(ifla_vf_vlan))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_vlan>())).vf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_vlan),
            "::",
            stringify!(vf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_vlan>())).vlan as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_vlan),
            "::",
            stringify!(vlan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_vlan>())).qos as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_vlan),
            "::",
            stringify!(qos)
        )
    );
}
pub const IFLA_VF_VLAN_INFO_UNSPEC: _bindgen_ty_26 = 0;
pub const IFLA_VF_VLAN_INFO: _bindgen_ty_26 = 1;
pub const __IFLA_VF_VLAN_INFO_MAX: _bindgen_ty_26 = 2;
pub type _bindgen_ty_26 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct ifla_vf_vlan_info {
    pub vf: __u32,
    pub vlan: __u32,
    pub qos: __u32,
    pub vlan_proto: __be16,
}
#[test]
fn bindgen_test_layout_ifla_vf_vlan_info() {
    assert_eq!(
        ::std::mem::size_of::<ifla_vf_vlan_info>(),
        16usize,
        concat!("Size of: ", stringify!(ifla_vf_vlan_info))
    );
    assert_eq!(
        ::std::mem::align_of::<ifla_vf_vlan_info>(),
        4usize,
        concat!("Alignment of ", stringify!(ifla_vf_vlan_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_vlan_info>())).vf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_vlan_info),
            "::",
            stringify!(vf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_vlan_info>())).vlan as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_vlan_info),
            "::",
            stringify!(vlan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_vlan_info>())).qos as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_vlan_info),
            "::",
            stringify!(qos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_vlan_info>())).vlan_proto as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_vlan_info),
            "::",
            stringify!(vlan_proto)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct ifla_vf_tx_rate {
    pub vf: __u32,
    pub rate: __u32,
}
#[test]
fn bindgen_test_layout_ifla_vf_tx_rate() {
    assert_eq!(
        ::std::mem::size_of::<ifla_vf_tx_rate>(),
        8usize,
        concat!("Size of: ", stringify!(ifla_vf_tx_rate))
    );
    assert_eq!(
        ::std::mem::align_of::<ifla_vf_tx_rate>(),
        4usize,
        concat!("Alignment of ", stringify!(ifla_vf_tx_rate))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_tx_rate>())).vf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_tx_rate),
            "::",
            stringify!(vf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_tx_rate>())).rate as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_tx_rate),
            "::",
            stringify!(rate)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct ifla_vf_rate {
    pub vf: __u32,
    pub min_tx_rate: __u32,
    pub max_tx_rate: __u32,
}
#[test]
fn bindgen_test_layout_ifla_vf_rate() {
    assert_eq!(
        ::std::mem::size_of::<ifla_vf_rate>(),
        12usize,
        concat!("Size of: ", stringify!(ifla_vf_rate))
    );
    assert_eq!(
        ::std::mem::align_of::<ifla_vf_rate>(),
        4usize,
        concat!("Alignment of ", stringify!(ifla_vf_rate))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_rate>())).vf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_rate),
            "::",
            stringify!(vf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_rate>())).min_tx_rate as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_rate),
            "::",
            stringify!(min_tx_rate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_rate>())).max_tx_rate as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_rate),
            "::",
            stringify!(max_tx_rate)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct ifla_vf_spoofchk {
    pub vf: __u32,
    pub setting: __u32,
}
#[test]
fn bindgen_test_layout_ifla_vf_spoofchk() {
    assert_eq!(
        ::std::mem::size_of::<ifla_vf_spoofchk>(),
        8usize,
        concat!("Size of: ", stringify!(ifla_vf_spoofchk))
    );
    assert_eq!(
        ::std::mem::align_of::<ifla_vf_spoofchk>(),
        4usize,
        concat!("Alignment of ", stringify!(ifla_vf_spoofchk))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_spoofchk>())).vf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_spoofchk),
            "::",
            stringify!(vf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_spoofchk>())).setting as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_spoofchk),
            "::",
            stringify!(setting)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct ifla_vf_guid {
    pub vf: __u32,
    pub guid: __u64,
}
#[test]
fn bindgen_test_layout_ifla_vf_guid() {
    assert_eq!(
        ::std::mem::size_of::<ifla_vf_guid>(),
        16usize,
        concat!("Size of: ", stringify!(ifla_vf_guid))
    );
    assert_eq!(
        ::std::mem::align_of::<ifla_vf_guid>(),
        8usize,
        concat!("Alignment of ", stringify!(ifla_vf_guid))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_guid>())).vf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_guid),
            "::",
            stringify!(vf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_guid>())).guid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_guid),
            "::",
            stringify!(guid)
        )
    );
}
pub const IFLA_VF_LINK_STATE_AUTO: _bindgen_ty_27 = 0;
pub const IFLA_VF_LINK_STATE_ENABLE: _bindgen_ty_27 = 1;
pub const IFLA_VF_LINK_STATE_DISABLE: _bindgen_ty_27 = 2;
pub const __IFLA_VF_LINK_STATE_MAX: _bindgen_ty_27 = 3;
pub type _bindgen_ty_27 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct ifla_vf_link_state {
    pub vf: __u32,
    pub link_state: __u32,
}
#[test]
fn bindgen_test_layout_ifla_vf_link_state() {
    assert_eq!(
        ::std::mem::size_of::<ifla_vf_link_state>(),
        8usize,
        concat!("Size of: ", stringify!(ifla_vf_link_state))
    );
    assert_eq!(
        ::std::mem::align_of::<ifla_vf_link_state>(),
        4usize,
        concat!("Alignment of ", stringify!(ifla_vf_link_state))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_link_state>())).vf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_link_state),
            "::",
            stringify!(vf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_link_state>())).link_state as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_link_state),
            "::",
            stringify!(link_state)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct ifla_vf_rss_query_en {
    pub vf: __u32,
    pub setting: __u32,
}
#[test]
fn bindgen_test_layout_ifla_vf_rss_query_en() {
    assert_eq!(
        ::std::mem::size_of::<ifla_vf_rss_query_en>(),
        8usize,
        concat!("Size of: ", stringify!(ifla_vf_rss_query_en))
    );
    assert_eq!(
        ::std::mem::align_of::<ifla_vf_rss_query_en>(),
        4usize,
        concat!("Alignment of ", stringify!(ifla_vf_rss_query_en))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_rss_query_en>())).vf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_rss_query_en),
            "::",
            stringify!(vf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_rss_query_en>())).setting as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_rss_query_en),
            "::",
            stringify!(setting)
        )
    );
}
pub const IFLA_VF_STATS_RX_PACKETS: _bindgen_ty_28 = 0;
pub const IFLA_VF_STATS_TX_PACKETS: _bindgen_ty_28 = 1;
pub const IFLA_VF_STATS_RX_BYTES: _bindgen_ty_28 = 2;
pub const IFLA_VF_STATS_TX_BYTES: _bindgen_ty_28 = 3;
pub const IFLA_VF_STATS_BROADCAST: _bindgen_ty_28 = 4;
pub const IFLA_VF_STATS_MULTICAST: _bindgen_ty_28 = 5;
pub const IFLA_VF_STATS_PAD: _bindgen_ty_28 = 6;
pub const IFLA_VF_STATS_RX_DROPPED: _bindgen_ty_28 = 7;
pub const IFLA_VF_STATS_TX_DROPPED: _bindgen_ty_28 = 8;
pub const __IFLA_VF_STATS_MAX: _bindgen_ty_28 = 9;
pub type _bindgen_ty_28 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct ifla_vf_trust {
    pub vf: __u32,
    pub setting: __u32,
}
#[test]
fn bindgen_test_layout_ifla_vf_trust() {
    assert_eq!(
        ::std::mem::size_of::<ifla_vf_trust>(),
        8usize,
        concat!("Size of: ", stringify!(ifla_vf_trust))
    );
    assert_eq!(
        ::std::mem::align_of::<ifla_vf_trust>(),
        4usize,
        concat!("Alignment of ", stringify!(ifla_vf_trust))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_trust>())).vf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_trust),
            "::",
            stringify!(vf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_trust>())).setting as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_trust),
            "::",
            stringify!(setting)
        )
    );
}
pub const IFLA_VF_PORT_UNSPEC: _bindgen_ty_29 = 0;
pub const IFLA_VF_PORT: _bindgen_ty_29 = 1;
pub const __IFLA_VF_PORT_MAX: _bindgen_ty_29 = 2;
pub type _bindgen_ty_29 = u32;
pub const IFLA_PORT_UNSPEC: _bindgen_ty_30 = 0;
pub const IFLA_PORT_VF: _bindgen_ty_30 = 1;
pub const IFLA_PORT_PROFILE: _bindgen_ty_30 = 2;
pub const IFLA_PORT_VSI_TYPE: _bindgen_ty_30 = 3;
pub const IFLA_PORT_INSTANCE_UUID: _bindgen_ty_30 = 4;
pub const IFLA_PORT_HOST_UUID: _bindgen_ty_30 = 5;
pub const IFLA_PORT_REQUEST: _bindgen_ty_30 = 6;
pub const IFLA_PORT_RESPONSE: _bindgen_ty_30 = 7;
pub const __IFLA_PORT_MAX: _bindgen_ty_30 = 8;
pub type _bindgen_ty_30 = u32;
pub const PORT_REQUEST_PREASSOCIATE: _bindgen_ty_31 = 0;
pub const PORT_REQUEST_PREASSOCIATE_RR: _bindgen_ty_31 = 1;
pub const PORT_REQUEST_ASSOCIATE: _bindgen_ty_31 = 2;
pub const PORT_REQUEST_DISASSOCIATE: _bindgen_ty_31 = 3;
pub type _bindgen_ty_31 = u32;
pub const PORT_VDP_RESPONSE_SUCCESS: _bindgen_ty_32 = 0;
pub const PORT_VDP_RESPONSE_INVALID_FORMAT: _bindgen_ty_32 = 1;
pub const PORT_VDP_RESPONSE_INSUFFICIENT_RESOURCES: _bindgen_ty_32 = 2;
pub const PORT_VDP_RESPONSE_UNUSED_VTID: _bindgen_ty_32 = 3;
pub const PORT_VDP_RESPONSE_VTID_VIOLATION: _bindgen_ty_32 = 4;
pub const PORT_VDP_RESPONSE_VTID_VERSION_VIOALTION: _bindgen_ty_32 = 5;
pub const PORT_VDP_RESPONSE_OUT_OF_SYNC: _bindgen_ty_32 = 6;
pub const PORT_PROFILE_RESPONSE_SUCCESS: _bindgen_ty_32 = 256;
pub const PORT_PROFILE_RESPONSE_INPROGRESS: _bindgen_ty_32 = 257;
pub const PORT_PROFILE_RESPONSE_INVALID: _bindgen_ty_32 = 258;
pub const PORT_PROFILE_RESPONSE_BADSTATE: _bindgen_ty_32 = 259;
pub const PORT_PROFILE_RESPONSE_INSUFFICIENT_RESOURCES: _bindgen_ty_32 = 260;
pub const PORT_PROFILE_RESPONSE_ERROR: _bindgen_ty_32 = 261;
pub type _bindgen_ty_32 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct ifla_port_vsi {
    pub vsi_mgr_id: __u8,
    pub vsi_type_id: [__u8; 3usize],
    pub vsi_type_version: __u8,
    pub pad: [__u8; 3usize],
}
#[test]
fn bindgen_test_layout_ifla_port_vsi() {
    assert_eq!(
        ::std::mem::size_of::<ifla_port_vsi>(),
        8usize,
        concat!("Size of: ", stringify!(ifla_port_vsi))
    );
    assert_eq!(
        ::std::mem::align_of::<ifla_port_vsi>(),
        1usize,
        concat!("Alignment of ", stringify!(ifla_port_vsi))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_port_vsi>())).vsi_mgr_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_port_vsi),
            "::",
            stringify!(vsi_mgr_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_port_vsi>())).vsi_type_id as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_port_vsi),
            "::",
            stringify!(vsi_type_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_port_vsi>())).vsi_type_version as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_port_vsi),
            "::",
            stringify!(vsi_type_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_port_vsi>())).pad as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_port_vsi),
            "::",
            stringify!(pad)
        )
    );
}
pub const IFLA_IPOIB_UNSPEC: _bindgen_ty_33 = 0;
pub const IFLA_IPOIB_PKEY: _bindgen_ty_33 = 1;
pub const IFLA_IPOIB_MODE: _bindgen_ty_33 = 2;
pub const IFLA_IPOIB_UMCAST: _bindgen_ty_33 = 3;
pub const __IFLA_IPOIB_MAX: _bindgen_ty_33 = 4;
pub type _bindgen_ty_33 = u32;
pub const IPOIB_MODE_DATAGRAM: _bindgen_ty_34 = 0;
pub const IPOIB_MODE_CONNECTED: _bindgen_ty_34 = 1;
pub type _bindgen_ty_34 = u32;
pub const IFLA_HSR_UNSPEC: _bindgen_ty_35 = 0;
pub const IFLA_HSR_SLAVE1: _bindgen_ty_35 = 1;
pub const IFLA_HSR_SLAVE2: _bindgen_ty_35 = 2;
pub const IFLA_HSR_MULTICAST_SPEC: _bindgen_ty_35 = 3;
pub const IFLA_HSR_SUPERVISION_ADDR: _bindgen_ty_35 = 4;
pub const IFLA_HSR_SEQ_NR: _bindgen_ty_35 = 5;
pub const IFLA_HSR_VERSION: _bindgen_ty_35 = 6;
pub const __IFLA_HSR_MAX: _bindgen_ty_35 = 7;
pub type _bindgen_ty_35 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct if_stats_msg {
    pub family: __u8,
    pub pad1: __u8,
    pub pad2: __u16,
    pub ifindex: __u32,
    pub filter_mask: __u32,
}
#[test]
fn bindgen_test_layout_if_stats_msg() {
    assert_eq!(
        ::std::mem::size_of::<if_stats_msg>(),
        12usize,
        concat!("Size of: ", stringify!(if_stats_msg))
    );
    assert_eq!(
        ::std::mem::align_of::<if_stats_msg>(),
        4usize,
        concat!("Alignment of ", stringify!(if_stats_msg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<if_stats_msg>())).family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(if_stats_msg),
            "::",
            stringify!(family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<if_stats_msg>())).pad1 as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(if_stats_msg),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<if_stats_msg>())).pad2 as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(if_stats_msg),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<if_stats_msg>())).ifindex as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(if_stats_msg),
            "::",
            stringify!(ifindex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<if_stats_msg>())).filter_mask as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(if_stats_msg),
            "::",
            stringify!(filter_mask)
        )
    );
}
pub const IFLA_STATS_UNSPEC: _bindgen_ty_36 = 0;
pub const IFLA_STATS_LINK_64: _bindgen_ty_36 = 1;
pub const IFLA_STATS_LINK_XSTATS: _bindgen_ty_36 = 2;
pub const IFLA_STATS_LINK_XSTATS_SLAVE: _bindgen_ty_36 = 3;
pub const IFLA_STATS_LINK_OFFLOAD_XSTATS: _bindgen_ty_36 = 4;
pub const IFLA_STATS_AF_SPEC: _bindgen_ty_36 = 5;
pub const __IFLA_STATS_MAX: _bindgen_ty_36 = 6;
pub type _bindgen_ty_36 = u32;
pub const LINK_XSTATS_TYPE_UNSPEC: _bindgen_ty_37 = 0;
pub const LINK_XSTATS_TYPE_BRIDGE: _bindgen_ty_37 = 1;
pub const LINK_XSTATS_TYPE_BOND: _bindgen_ty_37 = 2;
pub const __LINK_XSTATS_TYPE_MAX: _bindgen_ty_37 = 3;
pub type _bindgen_ty_37 = u32;
pub const IFLA_OFFLOAD_XSTATS_UNSPEC: _bindgen_ty_38 = 0;
pub const IFLA_OFFLOAD_XSTATS_CPU_HIT: _bindgen_ty_38 = 1;
pub const __IFLA_OFFLOAD_XSTATS_MAX: _bindgen_ty_38 = 2;
pub type _bindgen_ty_38 = u32;
pub const XDP_ATTACHED_NONE: _bindgen_ty_39 = 0;
pub const XDP_ATTACHED_DRV: _bindgen_ty_39 = 1;
pub const XDP_ATTACHED_SKB: _bindgen_ty_39 = 2;
pub const XDP_ATTACHED_HW: _bindgen_ty_39 = 3;
pub const XDP_ATTACHED_MULTI: _bindgen_ty_39 = 4;
pub type _bindgen_ty_39 = u32;
pub const IFLA_XDP_UNSPEC: _bindgen_ty_40 = 0;
pub const IFLA_XDP_FD: _bindgen_ty_40 = 1;
pub const IFLA_XDP_ATTACHED: _bindgen_ty_40 = 2;
pub const IFLA_XDP_FLAGS: _bindgen_ty_40 = 3;
pub const IFLA_XDP_PROG_ID: _bindgen_ty_40 = 4;
pub const IFLA_XDP_DRV_PROG_ID: _bindgen_ty_40 = 5;
pub const IFLA_XDP_SKB_PROG_ID: _bindgen_ty_40 = 6;
pub const IFLA_XDP_HW_PROG_ID: _bindgen_ty_40 = 7;
pub const __IFLA_XDP_MAX: _bindgen_ty_40 = 8;
pub type _bindgen_ty_40 = u32;
pub const IFLA_EVENT_NONE: _bindgen_ty_41 = 0;
pub const IFLA_EVENT_REBOOT: _bindgen_ty_41 = 1;
pub const IFLA_EVENT_FEATURES: _bindgen_ty_41 = 2;
pub const IFLA_EVENT_BONDING_FAILOVER: _bindgen_ty_41 = 3;
pub const IFLA_EVENT_NOTIFY_PEERS: _bindgen_ty_41 = 4;
pub const IFLA_EVENT_IGMP_RESEND: _bindgen_ty_41 = 5;
pub const IFLA_EVENT_BONDING_OPTIONS: _bindgen_ty_41 = 6;
pub type _bindgen_ty_41 = u32;
pub const IFLA_TUN_UNSPEC: _bindgen_ty_42 = 0;
pub const IFLA_TUN_OWNER: _bindgen_ty_42 = 1;
pub const IFLA_TUN_GROUP: _bindgen_ty_42 = 2;
pub const IFLA_TUN_TYPE: _bindgen_ty_42 = 3;
pub const IFLA_TUN_PI: _bindgen_ty_42 = 4;
pub const IFLA_TUN_VNET_HDR: _bindgen_ty_42 = 5;
pub const IFLA_TUN_PERSIST: _bindgen_ty_42 = 6;
pub const IFLA_TUN_MULTI_QUEUE: _bindgen_ty_42 = 7;
pub const IFLA_TUN_NUM_QUEUES: _bindgen_ty_42 = 8;
pub const IFLA_TUN_NUM_DISABLED_QUEUES: _bindgen_ty_42 = 9;
pub const __IFLA_TUN_MAX: _bindgen_ty_42 = 10;
pub type _bindgen_ty_42 = u32;
pub const IFLA_RMNET_UNSPEC: _bindgen_ty_43 = 0;
pub const IFLA_RMNET_MUX_ID: _bindgen_ty_43 = 1;
pub const IFLA_RMNET_FLAGS: _bindgen_ty_43 = 2;
pub const __IFLA_RMNET_MAX: _bindgen_ty_43 = 3;
pub type _bindgen_ty_43 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct ifla_rmnet_flags {
    pub flags: __u32,
    pub mask: __u32,
}
#[test]
fn bindgen_test_layout_ifla_rmnet_flags() {
    assert_eq!(
        ::std::mem::size_of::<ifla_rmnet_flags>(),
        8usize,
        concat!("Size of: ", stringify!(ifla_rmnet_flags))
    );
    assert_eq!(
        ::std::mem::align_of::<ifla_rmnet_flags>(),
        4usize,
        concat!("Alignment of ", stringify!(ifla_rmnet_flags))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_rmnet_flags>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_rmnet_flags),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_rmnet_flags>())).mask as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_rmnet_flags),
            "::",
            stringify!(mask)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct ifaddrmsg {
    pub ifa_family: __u8,
    pub ifa_prefixlen: __u8,
    pub ifa_flags: __u8,
    pub ifa_scope: __u8,
    pub ifa_index: __u32,
}
#[test]
fn bindgen_test_layout_ifaddrmsg() {
    assert_eq!(
        ::std::mem::size_of::<ifaddrmsg>(),
        8usize,
        concat!("Size of: ", stringify!(ifaddrmsg))
    );
    assert_eq!(
        ::std::mem::align_of::<ifaddrmsg>(),
        4usize,
        concat!("Alignment of ", stringify!(ifaddrmsg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifaddrmsg>())).ifa_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifaddrmsg),
            "::",
            stringify!(ifa_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifaddrmsg>())).ifa_prefixlen as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ifaddrmsg),
            "::",
            stringify!(ifa_prefixlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifaddrmsg>())).ifa_flags as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ifaddrmsg),
            "::",
            stringify!(ifa_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifaddrmsg>())).ifa_scope as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(ifaddrmsg),
            "::",
            stringify!(ifa_scope)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifaddrmsg>())).ifa_index as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ifaddrmsg),
            "::",
            stringify!(ifa_index)
        )
    );
}
pub const IFA_UNSPEC: _bindgen_ty_44 = 0;
pub const IFA_ADDRESS: _bindgen_ty_44 = 1;
pub const IFA_LOCAL: _bindgen_ty_44 = 2;
pub const IFA_LABEL: _bindgen_ty_44 = 3;
pub const IFA_BROADCAST: _bindgen_ty_44 = 4;
pub const IFA_ANYCAST: _bindgen_ty_44 = 5;
pub const IFA_CACHEINFO: _bindgen_ty_44 = 6;
pub const IFA_MULTICAST: _bindgen_ty_44 = 7;
pub const IFA_FLAGS: _bindgen_ty_44 = 8;
pub const IFA_RT_PRIORITY: _bindgen_ty_44 = 9;
pub const IFA_TARGET_NETNSID: _bindgen_ty_44 = 10;
pub const __IFA_MAX: _bindgen_ty_44 = 11;
pub type _bindgen_ty_44 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct ifa_cacheinfo {
    pub ifa_prefered: __u32,
    pub ifa_valid: __u32,
    pub cstamp: __u32,
    pub tstamp: __u32,
}
#[test]
fn bindgen_test_layout_ifa_cacheinfo() {
    assert_eq!(
        ::std::mem::size_of::<ifa_cacheinfo>(),
        16usize,
        concat!("Size of: ", stringify!(ifa_cacheinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<ifa_cacheinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(ifa_cacheinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifa_cacheinfo>())).ifa_prefered as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifa_cacheinfo),
            "::",
            stringify!(ifa_prefered)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifa_cacheinfo>())).ifa_valid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ifa_cacheinfo),
            "::",
            stringify!(ifa_valid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifa_cacheinfo>())).cstamp as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ifa_cacheinfo),
            "::",
            stringify!(cstamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifa_cacheinfo>())).tstamp as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ifa_cacheinfo),
            "::",
            stringify!(tstamp)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct ndmsg {
    pub ndm_family: __u8,
    pub ndm_pad1: __u8,
    pub ndm_pad2: __u16,
    pub ndm_ifindex: __s32,
    pub ndm_state: __u16,
    pub ndm_flags: __u8,
    pub ndm_type: __u8,
}
#[test]
fn bindgen_test_layout_ndmsg() {
    assert_eq!(
        ::std::mem::size_of::<ndmsg>(),
        12usize,
        concat!("Size of: ", stringify!(ndmsg))
    );
    assert_eq!(
        ::std::mem::align_of::<ndmsg>(),
        4usize,
        concat!("Alignment of ", stringify!(ndmsg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ndmsg>())).ndm_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ndmsg),
            "::",
            stringify!(ndm_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ndmsg>())).ndm_pad1 as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ndmsg),
            "::",
            stringify!(ndm_pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ndmsg>())).ndm_pad2 as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ndmsg),
            "::",
            stringify!(ndm_pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ndmsg>())).ndm_ifindex as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ndmsg),
            "::",
            stringify!(ndm_ifindex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ndmsg>())).ndm_state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ndmsg),
            "::",
            stringify!(ndm_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ndmsg>())).ndm_flags as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(ndmsg),
            "::",
            stringify!(ndm_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ndmsg>())).ndm_type as *const _ as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(ndmsg),
            "::",
            stringify!(ndm_type)
        )
    );
}
pub const NDA_UNSPEC: _bindgen_ty_45 = 0;
pub const NDA_DST: _bindgen_ty_45 = 1;
pub const NDA_LLADDR: _bindgen_ty_45 = 2;
pub const NDA_CACHEINFO: _bindgen_ty_45 = 3;
pub const NDA_PROBES: _bindgen_ty_45 = 4;
pub const NDA_VLAN: _bindgen_ty_45 = 5;
pub const NDA_PORT: _bindgen_ty_45 = 6;
pub const NDA_VNI: _bindgen_ty_45 = 7;
pub const NDA_IFINDEX: _bindgen_ty_45 = 8;
pub const NDA_MASTER: _bindgen_ty_45 = 9;
pub const NDA_LINK_NETNSID: _bindgen_ty_45 = 10;
pub const NDA_SRC_VNI: _bindgen_ty_45 = 11;
pub const NDA_PROTOCOL: _bindgen_ty_45 = 12;
pub const __NDA_MAX: _bindgen_ty_45 = 13;
pub type _bindgen_ty_45 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct nda_cacheinfo {
    pub ndm_confirmed: __u32,
    pub ndm_used: __u32,
    pub ndm_updated: __u32,
    pub ndm_refcnt: __u32,
}
#[test]
fn bindgen_test_layout_nda_cacheinfo() {
    assert_eq!(
        ::std::mem::size_of::<nda_cacheinfo>(),
        16usize,
        concat!("Size of: ", stringify!(nda_cacheinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<nda_cacheinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(nda_cacheinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nda_cacheinfo>())).ndm_confirmed as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nda_cacheinfo),
            "::",
            stringify!(ndm_confirmed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nda_cacheinfo>())).ndm_used as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(nda_cacheinfo),
            "::",
            stringify!(ndm_used)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nda_cacheinfo>())).ndm_updated as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(nda_cacheinfo),
            "::",
            stringify!(ndm_updated)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nda_cacheinfo>())).ndm_refcnt as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(nda_cacheinfo),
            "::",
            stringify!(ndm_refcnt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct ndt_stats {
    pub ndts_allocs: __u64,
    pub ndts_destroys: __u64,
    pub ndts_hash_grows: __u64,
    pub ndts_res_failed: __u64,
    pub ndts_lookups: __u64,
    pub ndts_hits: __u64,
    pub ndts_rcv_probes_mcast: __u64,
    pub ndts_rcv_probes_ucast: __u64,
    pub ndts_periodic_gc_runs: __u64,
    pub ndts_forced_gc_runs: __u64,
    pub ndts_table_fulls: __u64,
}
#[test]
fn bindgen_test_layout_ndt_stats() {
    assert_eq!(
        ::std::mem::size_of::<ndt_stats>(),
        88usize,
        concat!("Size of: ", stringify!(ndt_stats))
    );
    assert_eq!(
        ::std::mem::align_of::<ndt_stats>(),
        8usize,
        concat!("Alignment of ", stringify!(ndt_stats))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ndt_stats>())).ndts_allocs as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ndt_stats),
            "::",
            stringify!(ndts_allocs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ndt_stats>())).ndts_destroys as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ndt_stats),
            "::",
            stringify!(ndts_destroys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ndt_stats>())).ndts_hash_grows as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ndt_stats),
            "::",
            stringify!(ndts_hash_grows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ndt_stats>())).ndts_res_failed as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ndt_stats),
            "::",
            stringify!(ndts_res_failed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ndt_stats>())).ndts_lookups as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ndt_stats),
            "::",
            stringify!(ndts_lookups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ndt_stats>())).ndts_hits as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ndt_stats),
            "::",
            stringify!(ndts_hits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ndt_stats>())).ndts_rcv_probes_mcast as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ndt_stats),
            "::",
            stringify!(ndts_rcv_probes_mcast)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ndt_stats>())).ndts_rcv_probes_ucast as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ndt_stats),
            "::",
            stringify!(ndts_rcv_probes_ucast)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ndt_stats>())).ndts_periodic_gc_runs as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ndt_stats),
            "::",
            stringify!(ndts_periodic_gc_runs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ndt_stats>())).ndts_forced_gc_runs as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ndt_stats),
            "::",
            stringify!(ndts_forced_gc_runs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ndt_stats>())).ndts_table_fulls as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ndt_stats),
            "::",
            stringify!(ndts_table_fulls)
        )
    );
}
pub const NDTPA_UNSPEC: _bindgen_ty_46 = 0;
pub const NDTPA_IFINDEX: _bindgen_ty_46 = 1;
pub const NDTPA_REFCNT: _bindgen_ty_46 = 2;
pub const NDTPA_REACHABLE_TIME: _bindgen_ty_46 = 3;
pub const NDTPA_BASE_REACHABLE_TIME: _bindgen_ty_46 = 4;
pub const NDTPA_RETRANS_TIME: _bindgen_ty_46 = 5;
pub const NDTPA_GC_STALETIME: _bindgen_ty_46 = 6;
pub const NDTPA_DELAY_PROBE_TIME: _bindgen_ty_46 = 7;
pub const NDTPA_QUEUE_LEN: _bindgen_ty_46 = 8;
pub const NDTPA_APP_PROBES: _bindgen_ty_46 = 9;
pub const NDTPA_UCAST_PROBES: _bindgen_ty_46 = 10;
pub const NDTPA_MCAST_PROBES: _bindgen_ty_46 = 11;
pub const NDTPA_ANYCAST_DELAY: _bindgen_ty_46 = 12;
pub const NDTPA_PROXY_DELAY: _bindgen_ty_46 = 13;
pub const NDTPA_PROXY_QLEN: _bindgen_ty_46 = 14;
pub const NDTPA_LOCKTIME: _bindgen_ty_46 = 15;
pub const NDTPA_QUEUE_LENBYTES: _bindgen_ty_46 = 16;
pub const NDTPA_MCAST_REPROBES: _bindgen_ty_46 = 17;
pub const NDTPA_PAD: _bindgen_ty_46 = 18;
pub const __NDTPA_MAX: _bindgen_ty_46 = 19;
pub type _bindgen_ty_46 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct ndtmsg {
    pub ndtm_family: __u8,
    pub ndtm_pad1: __u8,
    pub ndtm_pad2: __u16,
}
#[test]
fn bindgen_test_layout_ndtmsg() {
    assert_eq!(
        ::std::mem::size_of::<ndtmsg>(),
        4usize,
        concat!("Size of: ", stringify!(ndtmsg))
    );
    assert_eq!(
        ::std::mem::align_of::<ndtmsg>(),
        2usize,
        concat!("Alignment of ", stringify!(ndtmsg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ndtmsg>())).ndtm_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ndtmsg),
            "::",
            stringify!(ndtm_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ndtmsg>())).ndtm_pad1 as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ndtmsg),
            "::",
            stringify!(ndtm_pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ndtmsg>())).ndtm_pad2 as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ndtmsg),
            "::",
            stringify!(ndtm_pad2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct ndt_config {
    pub ndtc_key_len: __u16,
    pub ndtc_entry_size: __u16,
    pub ndtc_entries: __u32,
    pub ndtc_last_flush: __u32,
    pub ndtc_last_rand: __u32,
    pub ndtc_hash_rnd: __u32,
    pub ndtc_hash_mask: __u32,
    pub ndtc_hash_chain_gc: __u32,
    pub ndtc_proxy_qlen: __u32,
}
#[test]
fn bindgen_test_layout_ndt_config() {
    assert_eq!(
        ::std::mem::size_of::<ndt_config>(),
        32usize,
        concat!("Size of: ", stringify!(ndt_config))
    );
    assert_eq!(
        ::std::mem::align_of::<ndt_config>(),
        4usize,
        concat!("Alignment of ", stringify!(ndt_config))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ndt_config>())).ndtc_key_len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ndt_config),
            "::",
            stringify!(ndtc_key_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ndt_config>())).ndtc_entry_size as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ndt_config),
            "::",
            stringify!(ndtc_entry_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ndt_config>())).ndtc_entries as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ndt_config),
            "::",
            stringify!(ndtc_entries)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ndt_config>())).ndtc_last_flush as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ndt_config),
            "::",
            stringify!(ndtc_last_flush)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ndt_config>())).ndtc_last_rand as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ndt_config),
            "::",
            stringify!(ndtc_last_rand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ndt_config>())).ndtc_hash_rnd as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ndt_config),
            "::",
            stringify!(ndtc_hash_rnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ndt_config>())).ndtc_hash_mask as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ndt_config),
            "::",
            stringify!(ndtc_hash_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ndt_config>())).ndtc_hash_chain_gc as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ndt_config),
            "::",
            stringify!(ndtc_hash_chain_gc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ndt_config>())).ndtc_proxy_qlen as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ndt_config),
            "::",
            stringify!(ndtc_proxy_qlen)
        )
    );
}
pub const NDTA_UNSPEC: _bindgen_ty_47 = 0;
pub const NDTA_NAME: _bindgen_ty_47 = 1;
pub const NDTA_THRESH1: _bindgen_ty_47 = 2;
pub const NDTA_THRESH2: _bindgen_ty_47 = 3;
pub const NDTA_THRESH3: _bindgen_ty_47 = 4;
pub const NDTA_CONFIG: _bindgen_ty_47 = 5;
pub const NDTA_PARMS: _bindgen_ty_47 = 6;
pub const NDTA_STATS: _bindgen_ty_47 = 7;
pub const NDTA_GC_INTERVAL: _bindgen_ty_47 = 8;
pub const NDTA_PAD: _bindgen_ty_47 = 9;
pub const __NDTA_MAX: _bindgen_ty_47 = 10;
pub type _bindgen_ty_47 = u32;
pub const RTM_BASE: _bindgen_ty_48 = 16;
pub const RTM_NEWLINK: _bindgen_ty_48 = 16;
pub const RTM_DELLINK: _bindgen_ty_48 = 17;
pub const RTM_GETLINK: _bindgen_ty_48 = 18;
pub const RTM_SETLINK: _bindgen_ty_48 = 19;
pub const RTM_NEWADDR: _bindgen_ty_48 = 20;
pub const RTM_DELADDR: _bindgen_ty_48 = 21;
pub const RTM_GETADDR: _bindgen_ty_48 = 22;
pub const RTM_NEWROUTE: _bindgen_ty_48 = 24;
pub const RTM_DELROUTE: _bindgen_ty_48 = 25;
pub const RTM_GETROUTE: _bindgen_ty_48 = 26;
pub const RTM_NEWNEIGH: _bindgen_ty_48 = 28;
pub const RTM_DELNEIGH: _bindgen_ty_48 = 29;
pub const RTM_GETNEIGH: _bindgen_ty_48 = 30;
pub const RTM_NEWRULE: _bindgen_ty_48 = 32;
pub const RTM_DELRULE: _bindgen_ty_48 = 33;
pub const RTM_GETRULE: _bindgen_ty_48 = 34;
pub const RTM_NEWQDISC: _bindgen_ty_48 = 36;
pub const RTM_DELQDISC: _bindgen_ty_48 = 37;
pub const RTM_GETQDISC: _bindgen_ty_48 = 38;
pub const RTM_NEWTCLASS: _bindgen_ty_48 = 40;
pub const RTM_DELTCLASS: _bindgen_ty_48 = 41;
pub const RTM_GETTCLASS: _bindgen_ty_48 = 42;
pub const RTM_NEWTFILTER: _bindgen_ty_48 = 44;
pub const RTM_DELTFILTER: _bindgen_ty_48 = 45;
pub const RTM_GETTFILTER: _bindgen_ty_48 = 46;
pub const RTM_NEWACTION: _bindgen_ty_48 = 48;
pub const RTM_DELACTION: _bindgen_ty_48 = 49;
pub const RTM_GETACTION: _bindgen_ty_48 = 50;
pub const RTM_NEWPREFIX: _bindgen_ty_48 = 52;
pub const RTM_GETMULTICAST: _bindgen_ty_48 = 58;
pub const RTM_GETANYCAST: _bindgen_ty_48 = 62;
pub const RTM_NEWNEIGHTBL: _bindgen_ty_48 = 64;
pub const RTM_GETNEIGHTBL: _bindgen_ty_48 = 66;
pub const RTM_SETNEIGHTBL: _bindgen_ty_48 = 67;
pub const RTM_NEWNDUSEROPT: _bindgen_ty_48 = 68;
pub const RTM_NEWADDRLABEL: _bindgen_ty_48 = 72;
pub const RTM_DELADDRLABEL: _bindgen_ty_48 = 73;
pub const RTM_GETADDRLABEL: _bindgen_ty_48 = 74;
pub const RTM_GETDCB: _bindgen_ty_48 = 78;
pub const RTM_SETDCB: _bindgen_ty_48 = 79;
pub const RTM_NEWNETCONF: _bindgen_ty_48 = 80;
pub const RTM_DELNETCONF: _bindgen_ty_48 = 81;
pub const RTM_GETNETCONF: _bindgen_ty_48 = 82;
pub const RTM_NEWMDB: _bindgen_ty_48 = 84;
pub const RTM_DELMDB: _bindgen_ty_48 = 85;
pub const RTM_GETMDB: _bindgen_ty_48 = 86;
pub const RTM_NEWNSID: _bindgen_ty_48 = 88;
pub const RTM_DELNSID: _bindgen_ty_48 = 89;
pub const RTM_GETNSID: _bindgen_ty_48 = 90;
pub const RTM_NEWSTATS: _bindgen_ty_48 = 92;
pub const RTM_GETSTATS: _bindgen_ty_48 = 94;
pub const RTM_NEWCACHEREPORT: _bindgen_ty_48 = 96;
pub const RTM_NEWCHAIN: _bindgen_ty_48 = 100;
pub const RTM_DELCHAIN: _bindgen_ty_48 = 101;
pub const RTM_GETCHAIN: _bindgen_ty_48 = 102;
pub const RTM_NEWNEXTHOP: _bindgen_ty_48 = 104;
pub const RTM_DELNEXTHOP: _bindgen_ty_48 = 105;
pub const RTM_GETNEXTHOP: _bindgen_ty_48 = 106;
pub const __RTM_MAX: _bindgen_ty_48 = 107;
#[doc = "\t\tRouting/neighbour discovery messages."]
pub type _bindgen_ty_48 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct rtattr {
    pub rta_len: ::std::os::raw::c_ushort,
    pub rta_type: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_rtattr() {
    assert_eq!(
        ::std::mem::size_of::<rtattr>(),
        4usize,
        concat!("Size of: ", stringify!(rtattr))
    );
    assert_eq!(
        ::std::mem::align_of::<rtattr>(),
        2usize,
        concat!("Alignment of ", stringify!(rtattr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtattr>())).rta_len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rtattr),
            "::",
            stringify!(rta_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtattr>())).rta_type as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(rtattr),
            "::",
            stringify!(rta_type)
        )
    );
}
#[doc = "\t\tDefinitions used in routing table administration."]
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct rtmsg {
    pub rtm_family: ::std::os::raw::c_uchar,
    pub rtm_dst_len: ::std::os::raw::c_uchar,
    pub rtm_src_len: ::std::os::raw::c_uchar,
    pub rtm_tos: ::std::os::raw::c_uchar,
    pub rtm_table: ::std::os::raw::c_uchar,
    pub rtm_protocol: ::std::os::raw::c_uchar,
    pub rtm_scope: ::std::os::raw::c_uchar,
    pub rtm_type: ::std::os::raw::c_uchar,
    pub rtm_flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_rtmsg() {
    assert_eq!(
        ::std::mem::size_of::<rtmsg>(),
        12usize,
        concat!("Size of: ", stringify!(rtmsg))
    );
    assert_eq!(
        ::std::mem::align_of::<rtmsg>(),
        4usize,
        concat!("Alignment of ", stringify!(rtmsg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtmsg>())).rtm_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rtmsg),
            "::",
            stringify!(rtm_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtmsg>())).rtm_dst_len as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(rtmsg),
            "::",
            stringify!(rtm_dst_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtmsg>())).rtm_src_len as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(rtmsg),
            "::",
            stringify!(rtm_src_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtmsg>())).rtm_tos as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(rtmsg),
            "::",
            stringify!(rtm_tos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtmsg>())).rtm_table as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rtmsg),
            "::",
            stringify!(rtm_table)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtmsg>())).rtm_protocol as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(rtmsg),
            "::",
            stringify!(rtm_protocol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtmsg>())).rtm_scope as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(rtmsg),
            "::",
            stringify!(rtm_scope)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtmsg>())).rtm_type as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(rtmsg),
            "::",
            stringify!(rtm_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtmsg>())).rtm_flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rtmsg),
            "::",
            stringify!(rtm_flags)
        )
    );
}
pub const RTN_UNSPEC: _bindgen_ty_49 = 0;
pub const RTN_UNICAST: _bindgen_ty_49 = 1;
pub const RTN_LOCAL: _bindgen_ty_49 = 2;
pub const RTN_BROADCAST: _bindgen_ty_49 = 3;
pub const RTN_ANYCAST: _bindgen_ty_49 = 4;
pub const RTN_MULTICAST: _bindgen_ty_49 = 5;
pub const RTN_BLACKHOLE: _bindgen_ty_49 = 6;
pub const RTN_UNREACHABLE: _bindgen_ty_49 = 7;
pub const RTN_PROHIBIT: _bindgen_ty_49 = 8;
pub const RTN_THROW: _bindgen_ty_49 = 9;
pub const RTN_NAT: _bindgen_ty_49 = 10;
pub const RTN_XRESOLVE: _bindgen_ty_49 = 11;
pub const __RTN_MAX: _bindgen_ty_49 = 12;
pub type _bindgen_ty_49 = u32;
pub const rt_scope_t_RT_SCOPE_UNIVERSE: rt_scope_t = 0;
pub const rt_scope_t_RT_SCOPE_SITE: rt_scope_t = 200;
pub const rt_scope_t_RT_SCOPE_LINK: rt_scope_t = 253;
pub const rt_scope_t_RT_SCOPE_HOST: rt_scope_t = 254;
pub const rt_scope_t_RT_SCOPE_NOWHERE: rt_scope_t = 255;
pub type rt_scope_t = u32;
pub const rt_class_t_RT_TABLE_UNSPEC: rt_class_t = 0;
pub const rt_class_t_RT_TABLE_COMPAT: rt_class_t = 252;
pub const rt_class_t_RT_TABLE_DEFAULT: rt_class_t = 253;
pub const rt_class_t_RT_TABLE_MAIN: rt_class_t = 254;
pub const rt_class_t_RT_TABLE_LOCAL: rt_class_t = 255;
pub const rt_class_t_RT_TABLE_MAX: rt_class_t = 4294967295;
pub type rt_class_t = u32;
pub const rtattr_type_t_RTA_UNSPEC: rtattr_type_t = 0;
pub const rtattr_type_t_RTA_DST: rtattr_type_t = 1;
pub const rtattr_type_t_RTA_SRC: rtattr_type_t = 2;
pub const rtattr_type_t_RTA_IIF: rtattr_type_t = 3;
pub const rtattr_type_t_RTA_OIF: rtattr_type_t = 4;
pub const rtattr_type_t_RTA_GATEWAY: rtattr_type_t = 5;
pub const rtattr_type_t_RTA_PRIORITY: rtattr_type_t = 6;
pub const rtattr_type_t_RTA_PREFSRC: rtattr_type_t = 7;
pub const rtattr_type_t_RTA_METRICS: rtattr_type_t = 8;
pub const rtattr_type_t_RTA_MULTIPATH: rtattr_type_t = 9;
pub const rtattr_type_t_RTA_PROTOINFO: rtattr_type_t = 10;
pub const rtattr_type_t_RTA_FLOW: rtattr_type_t = 11;
pub const rtattr_type_t_RTA_CACHEINFO: rtattr_type_t = 12;
pub const rtattr_type_t_RTA_SESSION: rtattr_type_t = 13;
pub const rtattr_type_t_RTA_MP_ALGO: rtattr_type_t = 14;
pub const rtattr_type_t_RTA_TABLE: rtattr_type_t = 15;
pub const rtattr_type_t_RTA_MARK: rtattr_type_t = 16;
pub const rtattr_type_t_RTA_MFC_STATS: rtattr_type_t = 17;
pub const rtattr_type_t_RTA_VIA: rtattr_type_t = 18;
pub const rtattr_type_t_RTA_NEWDST: rtattr_type_t = 19;
pub const rtattr_type_t_RTA_PREF: rtattr_type_t = 20;
pub const rtattr_type_t_RTA_ENCAP_TYPE: rtattr_type_t = 21;
pub const rtattr_type_t_RTA_ENCAP: rtattr_type_t = 22;
pub const rtattr_type_t_RTA_EXPIRES: rtattr_type_t = 23;
pub const rtattr_type_t_RTA_PAD: rtattr_type_t = 24;
pub const rtattr_type_t_RTA_UID: rtattr_type_t = 25;
pub const rtattr_type_t_RTA_TTL_PROPAGATE: rtattr_type_t = 26;
pub const rtattr_type_t_RTA_IP_PROTO: rtattr_type_t = 27;
pub const rtattr_type_t_RTA_SPORT: rtattr_type_t = 28;
pub const rtattr_type_t_RTA_DPORT: rtattr_type_t = 29;
pub const rtattr_type_t_RTA_NH_ID: rtattr_type_t = 30;
pub const rtattr_type_t___RTA_MAX: rtattr_type_t = 31;
pub type rtattr_type_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct rtnexthop {
    pub rtnh_len: ::std::os::raw::c_ushort,
    pub rtnh_flags: ::std::os::raw::c_uchar,
    pub rtnh_hops: ::std::os::raw::c_uchar,
    pub rtnh_ifindex: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_rtnexthop() {
    assert_eq!(
        ::std::mem::size_of::<rtnexthop>(),
        8usize,
        concat!("Size of: ", stringify!(rtnexthop))
    );
    assert_eq!(
        ::std::mem::align_of::<rtnexthop>(),
        4usize,
        concat!("Alignment of ", stringify!(rtnexthop))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnexthop>())).rtnh_len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnexthop),
            "::",
            stringify!(rtnh_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnexthop>())).rtnh_flags as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnexthop),
            "::",
            stringify!(rtnh_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnexthop>())).rtnh_hops as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnexthop),
            "::",
            stringify!(rtnh_hops)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnexthop>())).rtnh_ifindex as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnexthop),
            "::",
            stringify!(rtnh_ifindex)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct rtvia {
    pub rtvia_family: __kernel_sa_family_t,
    pub rtvia_addr: __IncompleteArrayField<__u8>,
}
#[test]
fn bindgen_test_layout_rtvia() {
    assert_eq!(
        ::std::mem::size_of::<rtvia>(),
        2usize,
        concat!("Size of: ", stringify!(rtvia))
    );
    assert_eq!(
        ::std::mem::align_of::<rtvia>(),
        2usize,
        concat!("Alignment of ", stringify!(rtvia))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtvia>())).rtvia_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rtvia),
            "::",
            stringify!(rtvia_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtvia>())).rtvia_addr as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(rtvia),
            "::",
            stringify!(rtvia_addr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct rta_cacheinfo {
    pub rta_clntref: __u32,
    pub rta_lastuse: __u32,
    pub rta_expires: __s32,
    pub rta_error: __u32,
    pub rta_used: __u32,
    pub rta_id: __u32,
    pub rta_ts: __u32,
    pub rta_tsage: __u32,
}
#[test]
fn bindgen_test_layout_rta_cacheinfo() {
    assert_eq!(
        ::std::mem::size_of::<rta_cacheinfo>(),
        32usize,
        concat!("Size of: ", stringify!(rta_cacheinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<rta_cacheinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(rta_cacheinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rta_cacheinfo>())).rta_clntref as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rta_cacheinfo),
            "::",
            stringify!(rta_clntref)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rta_cacheinfo>())).rta_lastuse as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rta_cacheinfo),
            "::",
            stringify!(rta_lastuse)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rta_cacheinfo>())).rta_expires as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rta_cacheinfo),
            "::",
            stringify!(rta_expires)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rta_cacheinfo>())).rta_error as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(rta_cacheinfo),
            "::",
            stringify!(rta_error)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rta_cacheinfo>())).rta_used as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rta_cacheinfo),
            "::",
            stringify!(rta_used)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rta_cacheinfo>())).rta_id as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(rta_cacheinfo),
            "::",
            stringify!(rta_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rta_cacheinfo>())).rta_ts as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rta_cacheinfo),
            "::",
            stringify!(rta_ts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rta_cacheinfo>())).rta_tsage as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(rta_cacheinfo),
            "::",
            stringify!(rta_tsage)
        )
    );
}
pub const RTAX_UNSPEC: _bindgen_ty_50 = 0;
pub const RTAX_LOCK: _bindgen_ty_50 = 1;
pub const RTAX_MTU: _bindgen_ty_50 = 2;
pub const RTAX_WINDOW: _bindgen_ty_50 = 3;
pub const RTAX_RTT: _bindgen_ty_50 = 4;
pub const RTAX_RTTVAR: _bindgen_ty_50 = 5;
pub const RTAX_SSTHRESH: _bindgen_ty_50 = 6;
pub const RTAX_CWND: _bindgen_ty_50 = 7;
pub const RTAX_ADVMSS: _bindgen_ty_50 = 8;
pub const RTAX_REORDERING: _bindgen_ty_50 = 9;
pub const RTAX_HOPLIMIT: _bindgen_ty_50 = 10;
pub const RTAX_INITCWND: _bindgen_ty_50 = 11;
pub const RTAX_FEATURES: _bindgen_ty_50 = 12;
pub const RTAX_RTO_MIN: _bindgen_ty_50 = 13;
pub const RTAX_INITRWND: _bindgen_ty_50 = 14;
pub const RTAX_QUICKACK: _bindgen_ty_50 = 15;
pub const RTAX_CC_ALGO: _bindgen_ty_50 = 16;
pub const RTAX_FASTOPEN_NO_COOKIE: _bindgen_ty_50 = 17;
pub const __RTAX_MAX: _bindgen_ty_50 = 18;
pub type _bindgen_ty_50 = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rta_session {
    pub proto: __u8,
    pub pad1: __u8,
    pub pad2: __u16,
    pub u: rta_session__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rta_session__bindgen_ty_1 {
    pub ports: rta_session__bindgen_ty_1__bindgen_ty_1,
    pub icmpt: rta_session__bindgen_ty_1__bindgen_ty_2,
    pub spi: __u32,
    _bindgen_union_align: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct rta_session__bindgen_ty_1__bindgen_ty_1 {
    pub sport: __u16,
    pub dport: __u16,
}
#[test]
fn bindgen_test_layout_rta_session__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<rta_session__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(rta_session__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<rta_session__bindgen_ty_1__bindgen_ty_1>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(rta_session__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rta_session__bindgen_ty_1__bindgen_ty_1>())).sport as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rta_session__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(sport)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rta_session__bindgen_ty_1__bindgen_ty_1>())).dport as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(rta_session__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(dport)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct rta_session__bindgen_ty_1__bindgen_ty_2 {
    pub type_: __u8,
    pub code: __u8,
    pub ident: __u16,
}
#[test]
fn bindgen_test_layout_rta_session__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<rta_session__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(rta_session__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<rta_session__bindgen_ty_1__bindgen_ty_2>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(rta_session__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rta_session__bindgen_ty_1__bindgen_ty_2>())).type_ as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rta_session__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rta_session__bindgen_ty_1__bindgen_ty_2>())).code as *const _
                as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(rta_session__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rta_session__bindgen_ty_1__bindgen_ty_2>())).ident as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(rta_session__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(ident)
        )
    );
}
#[test]
fn bindgen_test_layout_rta_session__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<rta_session__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(rta_session__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<rta_session__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(rta_session__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rta_session__bindgen_ty_1>())).ports as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rta_session__bindgen_ty_1),
            "::",
            stringify!(ports)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rta_session__bindgen_ty_1>())).icmpt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rta_session__bindgen_ty_1),
            "::",
            stringify!(icmpt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rta_session__bindgen_ty_1>())).spi as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rta_session__bindgen_ty_1),
            "::",
            stringify!(spi)
        )
    );
}
impl ::std::fmt::Debug for rta_session__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "rta_session__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_rta_session() {
    assert_eq!(
        ::std::mem::size_of::<rta_session>(),
        8usize,
        concat!("Size of: ", stringify!(rta_session))
    );
    assert_eq!(
        ::std::mem::align_of::<rta_session>(),
        4usize,
        concat!("Alignment of ", stringify!(rta_session))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rta_session>())).proto as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rta_session),
            "::",
            stringify!(proto)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rta_session>())).pad1 as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(rta_session),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rta_session>())).pad2 as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(rta_session),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rta_session>())).u as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rta_session),
            "::",
            stringify!(u)
        )
    );
}
impl ::std::fmt::Debug for rta_session {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "rta_session {{ proto: {:?}, pad1: {:?}, pad2: {:?}, u: {:?} }}",
            self.proto, self.pad1, self.pad2, self.u
        )
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct rta_mfc_stats {
    pub mfcs_packets: __u64,
    pub mfcs_bytes: __u64,
    pub mfcs_wrong_if: __u64,
}
#[test]
fn bindgen_test_layout_rta_mfc_stats() {
    assert_eq!(
        ::std::mem::size_of::<rta_mfc_stats>(),
        24usize,
        concat!("Size of: ", stringify!(rta_mfc_stats))
    );
    assert_eq!(
        ::std::mem::align_of::<rta_mfc_stats>(),
        8usize,
        concat!("Alignment of ", stringify!(rta_mfc_stats))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rta_mfc_stats>())).mfcs_packets as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rta_mfc_stats),
            "::",
            stringify!(mfcs_packets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rta_mfc_stats>())).mfcs_bytes as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rta_mfc_stats),
            "::",
            stringify!(mfcs_bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rta_mfc_stats>())).mfcs_wrong_if as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rta_mfc_stats),
            "::",
            stringify!(mfcs_wrong_if)
        )
    );
}
#[doc = "\t\tGeneral form of address family dependent message."]
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct rtgenmsg {
    pub rtgen_family: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_rtgenmsg() {
    assert_eq!(
        ::std::mem::size_of::<rtgenmsg>(),
        1usize,
        concat!("Size of: ", stringify!(rtgenmsg))
    );
    assert_eq!(
        ::std::mem::align_of::<rtgenmsg>(),
        1usize,
        concat!("Alignment of ", stringify!(rtgenmsg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtgenmsg>())).rtgen_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rtgenmsg),
            "::",
            stringify!(rtgen_family)
        )
    );
}
#[doc = "\t\tLink layer specific messages."]
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct ifinfomsg {
    pub ifi_family: ::std::os::raw::c_uchar,
    pub __ifi_pad: ::std::os::raw::c_uchar,
    pub ifi_type: ::std::os::raw::c_ushort,
    pub ifi_index: ::std::os::raw::c_int,
    pub ifi_flags: ::std::os::raw::c_uint,
    pub ifi_change: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_ifinfomsg() {
    assert_eq!(
        ::std::mem::size_of::<ifinfomsg>(),
        16usize,
        concat!("Size of: ", stringify!(ifinfomsg))
    );
    assert_eq!(
        ::std::mem::align_of::<ifinfomsg>(),
        4usize,
        concat!("Alignment of ", stringify!(ifinfomsg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifinfomsg>())).ifi_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifinfomsg),
            "::",
            stringify!(ifi_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifinfomsg>())).__ifi_pad as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ifinfomsg),
            "::",
            stringify!(__ifi_pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifinfomsg>())).ifi_type as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ifinfomsg),
            "::",
            stringify!(ifi_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifinfomsg>())).ifi_index as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ifinfomsg),
            "::",
            stringify!(ifi_index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifinfomsg>())).ifi_flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ifinfomsg),
            "::",
            stringify!(ifi_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifinfomsg>())).ifi_change as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ifinfomsg),
            "::",
            stringify!(ifi_change)
        )
    );
}
#[doc = "\t\tprefix information"]
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct prefixmsg {
    pub prefix_family: ::std::os::raw::c_uchar,
    pub prefix_pad1: ::std::os::raw::c_uchar,
    pub prefix_pad2: ::std::os::raw::c_ushort,
    pub prefix_ifindex: ::std::os::raw::c_int,
    pub prefix_type: ::std::os::raw::c_uchar,
    pub prefix_len: ::std::os::raw::c_uchar,
    pub prefix_flags: ::std::os::raw::c_uchar,
    pub prefix_pad3: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_prefixmsg() {
    assert_eq!(
        ::std::mem::size_of::<prefixmsg>(),
        12usize,
        concat!("Size of: ", stringify!(prefixmsg))
    );
    assert_eq!(
        ::std::mem::align_of::<prefixmsg>(),
        4usize,
        concat!("Alignment of ", stringify!(prefixmsg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prefixmsg>())).prefix_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(prefixmsg),
            "::",
            stringify!(prefix_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prefixmsg>())).prefix_pad1 as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(prefixmsg),
            "::",
            stringify!(prefix_pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prefixmsg>())).prefix_pad2 as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(prefixmsg),
            "::",
            stringify!(prefix_pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prefixmsg>())).prefix_ifindex as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(prefixmsg),
            "::",
            stringify!(prefix_ifindex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prefixmsg>())).prefix_type as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(prefixmsg),
            "::",
            stringify!(prefix_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prefixmsg>())).prefix_len as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(prefixmsg),
            "::",
            stringify!(prefix_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prefixmsg>())).prefix_flags as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(prefixmsg),
            "::",
            stringify!(prefix_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prefixmsg>())).prefix_pad3 as *const _ as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(prefixmsg),
            "::",
            stringify!(prefix_pad3)
        )
    );
}
pub const PREFIX_UNSPEC: _bindgen_ty_51 = 0;
pub const PREFIX_ADDRESS: _bindgen_ty_51 = 1;
pub const PREFIX_CACHEINFO: _bindgen_ty_51 = 2;
pub const __PREFIX_MAX: _bindgen_ty_51 = 3;
pub type _bindgen_ty_51 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct prefix_cacheinfo {
    pub preferred_time: __u32,
    pub valid_time: __u32,
}
#[test]
fn bindgen_test_layout_prefix_cacheinfo() {
    assert_eq!(
        ::std::mem::size_of::<prefix_cacheinfo>(),
        8usize,
        concat!("Size of: ", stringify!(prefix_cacheinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<prefix_cacheinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(prefix_cacheinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prefix_cacheinfo>())).preferred_time as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(prefix_cacheinfo),
            "::",
            stringify!(preferred_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prefix_cacheinfo>())).valid_time as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(prefix_cacheinfo),
            "::",
            stringify!(valid_time)
        )
    );
}
#[doc = "\t\tTraffic control messages."]
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct tcmsg {
    pub tcm_family: ::std::os::raw::c_uchar,
    pub tcm__pad1: ::std::os::raw::c_uchar,
    pub tcm__pad2: ::std::os::raw::c_ushort,
    pub tcm_ifindex: ::std::os::raw::c_int,
    pub tcm_handle: __u32,
    pub tcm_parent: __u32,
    pub tcm_info: __u32,
}
#[test]
fn bindgen_test_layout_tcmsg() {
    assert_eq!(
        ::std::mem::size_of::<tcmsg>(),
        20usize,
        concat!("Size of: ", stringify!(tcmsg))
    );
    assert_eq!(
        ::std::mem::align_of::<tcmsg>(),
        4usize,
        concat!("Alignment of ", stringify!(tcmsg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcmsg>())).tcm_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tcmsg),
            "::",
            stringify!(tcm_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcmsg>())).tcm__pad1 as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(tcmsg),
            "::",
            stringify!(tcm__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcmsg>())).tcm__pad2 as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(tcmsg),
            "::",
            stringify!(tcm__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcmsg>())).tcm_ifindex as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tcmsg),
            "::",
            stringify!(tcm_ifindex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcmsg>())).tcm_handle as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tcmsg),
            "::",
            stringify!(tcm_handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcmsg>())).tcm_parent as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tcmsg),
            "::",
            stringify!(tcm_parent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcmsg>())).tcm_info as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tcmsg),
            "::",
            stringify!(tcm_info)
        )
    );
}
pub const TCA_UNSPEC: _bindgen_ty_52 = 0;
pub const TCA_KIND: _bindgen_ty_52 = 1;
pub const TCA_OPTIONS: _bindgen_ty_52 = 2;
pub const TCA_STATS: _bindgen_ty_52 = 3;
pub const TCA_XSTATS: _bindgen_ty_52 = 4;
pub const TCA_RATE: _bindgen_ty_52 = 5;
pub const TCA_FCNT: _bindgen_ty_52 = 6;
pub const TCA_STATS2: _bindgen_ty_52 = 7;
pub const TCA_STAB: _bindgen_ty_52 = 8;
pub const TCA_PAD: _bindgen_ty_52 = 9;
pub const TCA_DUMP_INVISIBLE: _bindgen_ty_52 = 10;
pub const TCA_CHAIN: _bindgen_ty_52 = 11;
pub const TCA_HW_OFFLOAD: _bindgen_ty_52 = 12;
pub const TCA_INGRESS_BLOCK: _bindgen_ty_52 = 13;
pub const TCA_EGRESS_BLOCK: _bindgen_ty_52 = 14;
pub const __TCA_MAX: _bindgen_ty_52 = 15;
pub type _bindgen_ty_52 = u32;
#[doc = "\t\tNeighbor Discovery userland options"]
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct nduseroptmsg {
    pub nduseropt_family: ::std::os::raw::c_uchar,
    pub nduseropt_pad1: ::std::os::raw::c_uchar,
    pub nduseropt_opts_len: ::std::os::raw::c_ushort,
    pub nduseropt_ifindex: ::std::os::raw::c_int,
    pub nduseropt_icmp_type: __u8,
    pub nduseropt_icmp_code: __u8,
    pub nduseropt_pad2: ::std::os::raw::c_ushort,
    pub nduseropt_pad3: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_nduseroptmsg() {
    assert_eq!(
        ::std::mem::size_of::<nduseroptmsg>(),
        16usize,
        concat!("Size of: ", stringify!(nduseroptmsg))
    );
    assert_eq!(
        ::std::mem::align_of::<nduseroptmsg>(),
        4usize,
        concat!("Alignment of ", stringify!(nduseroptmsg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nduseroptmsg>())).nduseropt_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nduseroptmsg),
            "::",
            stringify!(nduseropt_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nduseroptmsg>())).nduseropt_pad1 as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(nduseroptmsg),
            "::",
            stringify!(nduseropt_pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nduseroptmsg>())).nduseropt_opts_len as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(nduseroptmsg),
            "::",
            stringify!(nduseropt_opts_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nduseroptmsg>())).nduseropt_ifindex as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(nduseroptmsg),
            "::",
            stringify!(nduseropt_ifindex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<nduseroptmsg>())).nduseropt_icmp_type as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(nduseroptmsg),
            "::",
            stringify!(nduseropt_icmp_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<nduseroptmsg>())).nduseropt_icmp_code as *const _ as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(nduseroptmsg),
            "::",
            stringify!(nduseropt_icmp_code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nduseroptmsg>())).nduseropt_pad2 as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(nduseroptmsg),
            "::",
            stringify!(nduseropt_pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nduseroptmsg>())).nduseropt_pad3 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(nduseroptmsg),
            "::",
            stringify!(nduseropt_pad3)
        )
    );
}
pub const NDUSEROPT_UNSPEC: _bindgen_ty_53 = 0;
pub const NDUSEROPT_SRCADDR: _bindgen_ty_53 = 1;
pub const __NDUSEROPT_MAX: _bindgen_ty_53 = 2;
pub type _bindgen_ty_53 = u32;
pub const rtnetlink_groups_RTNLGRP_NONE: rtnetlink_groups = 0;
pub const rtnetlink_groups_RTNLGRP_LINK: rtnetlink_groups = 1;
pub const rtnetlink_groups_RTNLGRP_NOTIFY: rtnetlink_groups = 2;
pub const rtnetlink_groups_RTNLGRP_NEIGH: rtnetlink_groups = 3;
pub const rtnetlink_groups_RTNLGRP_TC: rtnetlink_groups = 4;
pub const rtnetlink_groups_RTNLGRP_IPV4_IFADDR: rtnetlink_groups = 5;
pub const rtnetlink_groups_RTNLGRP_IPV4_MROUTE: rtnetlink_groups = 6;
pub const rtnetlink_groups_RTNLGRP_IPV4_ROUTE: rtnetlink_groups = 7;
pub const rtnetlink_groups_RTNLGRP_IPV4_RULE: rtnetlink_groups = 8;
pub const rtnetlink_groups_RTNLGRP_IPV6_IFADDR: rtnetlink_groups = 9;
pub const rtnetlink_groups_RTNLGRP_IPV6_MROUTE: rtnetlink_groups = 10;
pub const rtnetlink_groups_RTNLGRP_IPV6_ROUTE: rtnetlink_groups = 11;
pub const rtnetlink_groups_RTNLGRP_IPV6_IFINFO: rtnetlink_groups = 12;
pub const rtnetlink_groups_RTNLGRP_DECnet_IFADDR: rtnetlink_groups = 13;
pub const rtnetlink_groups_RTNLGRP_NOP2: rtnetlink_groups = 14;
pub const rtnetlink_groups_RTNLGRP_DECnet_ROUTE: rtnetlink_groups = 15;
pub const rtnetlink_groups_RTNLGRP_DECnet_RULE: rtnetlink_groups = 16;
pub const rtnetlink_groups_RTNLGRP_NOP4: rtnetlink_groups = 17;
pub const rtnetlink_groups_RTNLGRP_IPV6_PREFIX: rtnetlink_groups = 18;
pub const rtnetlink_groups_RTNLGRP_IPV6_RULE: rtnetlink_groups = 19;
pub const rtnetlink_groups_RTNLGRP_ND_USEROPT: rtnetlink_groups = 20;
pub const rtnetlink_groups_RTNLGRP_PHONET_IFADDR: rtnetlink_groups = 21;
pub const rtnetlink_groups_RTNLGRP_PHONET_ROUTE: rtnetlink_groups = 22;
pub const rtnetlink_groups_RTNLGRP_DCB: rtnetlink_groups = 23;
pub const rtnetlink_groups_RTNLGRP_IPV4_NETCONF: rtnetlink_groups = 24;
pub const rtnetlink_groups_RTNLGRP_IPV6_NETCONF: rtnetlink_groups = 25;
pub const rtnetlink_groups_RTNLGRP_MDB: rtnetlink_groups = 26;
pub const rtnetlink_groups_RTNLGRP_MPLS_ROUTE: rtnetlink_groups = 27;
pub const rtnetlink_groups_RTNLGRP_NSID: rtnetlink_groups = 28;
pub const rtnetlink_groups_RTNLGRP_MPLS_NETCONF: rtnetlink_groups = 29;
pub const rtnetlink_groups_RTNLGRP_IPV4_MROUTE_R: rtnetlink_groups = 30;
pub const rtnetlink_groups_RTNLGRP_IPV6_MROUTE_R: rtnetlink_groups = 31;
pub const rtnetlink_groups_RTNLGRP_NEXTHOP: rtnetlink_groups = 32;
pub const rtnetlink_groups___RTNLGRP_MAX: rtnetlink_groups = 33;
pub type rtnetlink_groups = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct tcamsg {
    pub tca_family: ::std::os::raw::c_uchar,
    pub tca__pad1: ::std::os::raw::c_uchar,
    pub tca__pad2: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_tcamsg() {
    assert_eq!(
        ::std::mem::size_of::<tcamsg>(),
        4usize,
        concat!("Size of: ", stringify!(tcamsg))
    );
    assert_eq!(
        ::std::mem::align_of::<tcamsg>(),
        2usize,
        concat!("Alignment of ", stringify!(tcamsg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcamsg>())).tca_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tcamsg),
            "::",
            stringify!(tca_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcamsg>())).tca__pad1 as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(tcamsg),
            "::",
            stringify!(tca__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcamsg>())).tca__pad2 as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(tcamsg),
            "::",
            stringify!(tca__pad2)
        )
    );
}
pub const TCA_ROOT_UNSPEC: _bindgen_ty_54 = 0;
pub const TCA_ROOT_TAB: _bindgen_ty_54 = 1;
pub const TCA_ROOT_FLAGS: _bindgen_ty_54 = 2;
pub const TCA_ROOT_COUNT: _bindgen_ty_54 = 3;
pub const TCA_ROOT_TIME_DELTA: _bindgen_ty_54 = 4;
pub const __TCA_ROOT_MAX: _bindgen_ty_54 = 5;
pub type _bindgen_ty_54 = u32;
